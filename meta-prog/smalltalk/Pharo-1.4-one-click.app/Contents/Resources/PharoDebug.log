THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Compte class>>initialize:
12 November 2013 10:49:22.814 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

Compte class(Object)>>doesNotUnderstand: #initialize:
	Receiver: Compte
	Arguments and temporary variables: 
		aMessage: 	initialize: #Dupont
		exception: 	MessageNotUnderstood: Compte class>>initialize:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#initialize:->(Compte>>#initialize: "a CompiledM...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)

		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(914096128)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Compte initialize: #Dupont
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(630194176)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(914096128)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 26)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 26)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(914096128)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(216268800)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (996671488) [other:  (blinkStart -> 2412965) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compte initialize: #Dupont

'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(1018691584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 26)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 26)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(1018691584)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(708575232) a PluggableTextMorph(10...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(203948032)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[(269@337) mouseUp 2413717 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(257.0@333.0) corner: (400.0@351.0)
		owner: 	a MenuMorph(525336576)
		submorphs: 	#()
		fullBounds: 	(257.0@333.0) corner: (400.0@351.0)
		color: 	Color black
		extension: 	a MorphExtension (214171648)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(203948032)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[(269@337) mouseUp 2413717 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(257.0@333.0) corner: (400.0@351.0)
		owner: 	a MenuMorph(525336576)
		submorphs: 	#()
		fullBounds: 	(257.0@333.0) corner: (400.0@351.0)
		color: 	Color black
		extension: 	a MorphExtension (214171648)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(203948032)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[(269@337) mouseUp 2413717 nil]
	Receiver's instance variables: 
		bounds: 	(257.0@333.0) corner: (400.0@351.0)
		owner: 	a MenuMorph(525336576)
		submorphs: 	#()
		fullBounds: 	(257.0@333.0) corner: (400.0@351.0)
		color: 	Color black
		extension: 	a MorphExtension (214171648)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(203948032)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[(269@337) mouseUp 2413717 nil]
	Receiver's instance variables: 
		bounds: 	(257.0@333.0) corner: (400.0@351.0)
		owner: 	a MenuMorph(525336576)
		submorphs: 	#()
		fullBounds: 	(257.0@333.0) corner: (400.0@351.0)
		color: 	Color black
		extension: 	a MorphExtension (214171648)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(269@337) mouseUp 2413717 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(203948032)'Inspect it (i)'
	Receiver's instance variables: 
		timeStamp: 	2413717
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(269@337)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(203948032)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[(269@337) mouseUp 2413717 nil]
	Receiver's instance variables: 
		bounds: 	(257.0@333.0) corner: (400.0@351.0)
		owner: 	a MenuMorph(525336576)
		submorphs: 	#()
		fullBounds: 	(257.0@333.0) corner: (400.0@351.0)
		color: 	Color black
		extension: 	a MorphExtension (214171648)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(269@337) mouseUp 2413717 nil]
		aMorph: 	a ToggleMenuItemMorph(203948032)'Inspect it (i)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(269@337) mouseUp 2413717 nil]
		aMorph: 	a ToggleMenuItemMorph(203948032)'Inspect it (i)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(203948032)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[(269@337) mouseUp 2413717 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(257.0@333.0) corner: (400.0@351.0)
		owner: 	a MenuMorph(525336576)
		submorphs: 	#()
		fullBounds: 	(257.0@333.0) corner: (400.0@351.0)
		color: 	Color black
		extension: 	a MorphExtension (214171648)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(269@337) mouseUp 2413717 nil]
		aMorph: 	a MenuMorph(525336576)
		localEvt: 	[(269@337) mouseUp 2413717 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(203948032)'Inspect it (i)'
		morphs: 	an Array(a ToggleMenuItemMorph(38010880)'Do it (d)' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(269@337) mouseUp 2413717 nil]
		aMorph: 	a MenuMorph(525336576)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(525336576)
	Arguments and temporary variables: 
		anEvent: 	[(269@337) mouseUp 2413717 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(252.0@290.0) corner: (405.0@630.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(38010880)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	(252.0@290.0) corner: (405.0@630.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (540278784) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(203948032)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(38010880)'Do it (d)' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(525336576)
	Arguments and temporary variables: 
		anEvent: 	[(269@337) mouseUp 2413717 nil]
	Receiver's instance variables: 
		bounds: 	(252.0@290.0) corner: (405.0@630.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(38010880)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	(252.0@290.0) corner: (405.0@630.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (540278784) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(203948032)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(38010880)'Do it (d)' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(525336576)
	Arguments and temporary variables: 
		evt: 	[(269@337) mouseUp 2413717 nil]
	Receiver's instance variables: 
		bounds: 	(252.0@290.0) corner: (405.0@630.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(38010880)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	(252.0@290.0) corner: (405.0@630.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (540278784) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(203948032)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(38010880)'Do it (d)' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(269@337) mouseUp 2413717 nil]
		focusHolder: 	a MenuMorph(525336576)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(434@305) corner: (450@321)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(434@305) corner: (450@321)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(1035730944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(442@314) mouseOver nil nil]
		targetOffset: 	(72.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2415683 441 315 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(717225984) a Syste...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(269@337) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(717225984) a Syste...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(269@337) mouseUp 2413717 nil]
		focusHolder: 	a MenuMorph(525336576)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(439@301) corner: (455@317)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(439@301) corner: (455@317)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(1035730944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(447@310) mouseOver nil nil]
		targetOffset: 	(72.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2415704 444 313 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(269@337) mouseUp 2413717 nil]
		focusHolder: 	a MenuMorph(525336576)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(439@301) corner: (455@317)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(439@301) corner: (455@317)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(1035730944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(447@310) mouseOver nil nil]
		targetOffset: 	(72.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2415704 444 313 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(269@337) mouseUp 2413717 nil]
	Receiver's instance variables: 
		bounds: 	(443@298) corner: (459@314)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(443@298) corner: (459@314)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(1035730944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(451@307) mouseOver nil nil]
		targetOffset: 	(72.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2415725 449 308 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(269@337) mouseUp 2413717 nil]
		evt: 	[(269@337) mouseUp 2413717 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(443@298) corner: (459@314)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(443@298) corner: (459@314)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(1035730944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(451@307) mouseOver nil nil]
		targetOffset: 	(72.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2415725 449 308 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(269@337) mouseUp 2413717 nil]
		evtBuf: 	#(1 2413717 269 337 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(443@298) corner: (459@314)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(443@298) corner: (459@314)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(1035730944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(451@307) mouseOver nil nil]
		targetOffset: 	(72.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2415725 449 308 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (1280@977)
		canvas: 	a FormCanvas on: DisplayScreen(1280x977x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(277348352))(an OBSys...etc...
		lastStepTime: 	2415745
		lastStepMessage: 	nil
		lastCycleTime: 	2415745
		alarms: 	a Heap()
		lastAlarmTime: 	2415745
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
Compte class(Object)>>doesNotUnderstand: #initialize:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[editor mouseUp: evt] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Compte class>>initialize:
12 November 2013 10:49:27.944 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

Compte class(Object)>>doesNotUnderstand: #initialize:
	Receiver: Compte
	Arguments and temporary variables: 
		aMessage: 	initialize: #Dupont
		exception: 	MessageNotUnderstood: Compte class>>initialize:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#initialize:->(Compte>>#initialize: "a CompiledM...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)

		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(914096128)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Compte initialize: #Dupont
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(55574528)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(914096128)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 26)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 26)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(914096128)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(216268800)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (996671488) [other:  (blinkStart -> 2418585) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compte initialize: #Dupont

'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(1018691584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 26)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 26)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(1018691584)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(1018691584)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(1018691584)
		secondArg: 	a PluggableTextMorph(1018691584)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(1018691584)
		secondArg: 	a PluggableTextMorph(1018691584)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(1018691584)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(1018691584)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#Unix->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #browseIt on Cmd + B do [:morph | morph b...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	4
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 #browseIt on Cmd + B...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#Unix->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(1018691584)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(1018691584)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(1018691584)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	1
		each: 	a KMCategoryTarget
		indexLimiT: 	5
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCa...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(1018691584)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(1018691584)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(1018691584)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 26)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(216268800)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(216268800)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(216268800)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(186@285) corner: (624@450)
		owner: 	a PluggableTextMorph(1018691584)
		submorphs: 	an Array(a TextMorphForEditView(914096128))
		fullBounds: 	(186@285) corner: (624@450)
		color: 	Color transparent
		extension: 	a MorphExtension (223608832) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-189@ -285.0)...etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (432@50)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(914096128)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TextMorphForEditView(914096128)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(914096128)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(216268800)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (996671488) [other:  (blinkStart -> 2418585) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compte initialize: #Dupont

'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(1018691584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(914096128)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(216268800)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (996671488) [other:  (blinkStart -> 2418585) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compte initialize: #Dupont

'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(1018691584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(914096128)
	Receiver's instance variables: 
		timeStamp: 	2419501
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(58@38.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	105
		charCode: 	105
		scanCode: 	105


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(914096128)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(216268800)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (996671488) [other:  (blinkStart -> 2418585) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compte initialize: #Dupont

'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(1018691584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
Compte class(Object)>>doesNotUnderstand: #initialize:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Compte class>>initialize:
12 November 2013 10:59:32.1 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

Compte class(Object)>>doesNotUnderstand: #initialize:
	Receiver: Compte
	Arguments and temporary variables: 
		aMessage: 	initialize: #Dupont
		exception: 	MessageNotUnderstood: Compte class>>initialize:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('métier' deposer:)

		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(914096128)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C1 := Compte initialize: #Dupont
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(797704192)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(914096128)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(914096128)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(216268800)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (996671488) [other:  (blinkStart -> 3024175) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C1 := Compte initialize: #Dupont
C1 deposer: 500
'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(1018691584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(1018691584)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(708575232) a PluggableTextMorph(10...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(578551808)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(334@299) mouseUp 3004757 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(307.0@288.0) corner: (450.0@306.0)
		owner: 	a MenuMorph(390594560)
		submorphs: 	#()
		fullBounds: 	(307.0@288.0) corner: (450.0@306.0)
		color: 	Color black
		extension: 	a MorphExtension (588775424)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(578551808)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(334@299) mouseUp 3004757 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(307.0@288.0) corner: (450.0@306.0)
		owner: 	a MenuMorph(390594560)
		submorphs: 	#()
		fullBounds: 	(307.0@288.0) corner: (450.0@306.0)
		color: 	Color black
		extension: 	a MorphExtension (588775424)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(578551808)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(334@299) mouseUp 3004757 nil]
	Receiver's instance variables: 
		bounds: 	(307.0@288.0) corner: (450.0@306.0)
		owner: 	a MenuMorph(390594560)
		submorphs: 	#()
		fullBounds: 	(307.0@288.0) corner: (450.0@306.0)
		color: 	Color black
		extension: 	a MorphExtension (588775424)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(578551808)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(334@299) mouseUp 3004757 nil]
	Receiver's instance variables: 
		bounds: 	(307.0@288.0) corner: (450.0@306.0)
		owner: 	a MenuMorph(390594560)
		submorphs: 	#()
		fullBounds: 	(307.0@288.0) corner: (450.0@306.0)
		color: 	Color black
		extension: 	a MorphExtension (588775424)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(334@299) mouseUp 3004757 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(578551808)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	3004757
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(334@299)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(578551808)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(334@299) mouseUp 3004757 nil]
	Receiver's instance variables: 
		bounds: 	(307.0@288.0) corner: (450.0@306.0)
		owner: 	a MenuMorph(390594560)
		submorphs: 	#()
		fullBounds: 	(307.0@288.0) corner: (450.0@306.0)
		color: 	Color black
		extension: 	a MorphExtension (588775424)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(334@299) mouseUp 3004757 nil]
		aMorph: 	a ToggleMenuItemMorph(578551808)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(334@299) mouseUp 3004757 nil]
		aMorph: 	a ToggleMenuItemMorph(578551808)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(578551808)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(334@299) mouseUp 3004757 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(307.0@288.0) corner: (450.0@306.0)
		owner: 	a MenuMorph(390594560)
		submorphs: 	#()
		fullBounds: 	(307.0@288.0) corner: (450.0@306.0)
		color: 	Color black
		extension: 	a MorphExtension (588775424)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(334@299) mouseUp 3004757 nil]
		aMorph: 	a MenuMorph(390594560)
		localEvt: 	[(334@299) mouseUp 3004757 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(578551808)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(578551808)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(334@299) mouseUp 3004757 nil]
		aMorph: 	a MenuMorph(390594560)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(390594560)
	Arguments and temporary variables: 
		anEvent: 	[(334@299) mouseUp 3004757 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(302.0@283.0) corner: (455.0@623.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(578551808)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(302.0@283.0) corner: (455.0@623.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (405536768) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(578551808)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(578551808)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(390594560)
	Arguments and temporary variables: 
		anEvent: 	[(334@299) mouseUp 3004757 nil]
	Receiver's instance variables: 
		bounds: 	(302.0@283.0) corner: (455.0@623.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(578551808)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(302.0@283.0) corner: (455.0@623.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (405536768) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(578551808)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(578551808)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(390594560)
	Arguments and temporary variables: 
		evt: 	[(334@299) mouseUp 3004757 nil]
	Receiver's instance variables: 
		bounds: 	(302.0@283.0) corner: (455.0@623.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(578551808)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(302.0@283.0) corner: (455.0@623.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (405536768) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(578551808)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(578551808)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(334@299) mouseUp 3004757 nil]
		focusHolder: 	a MenuMorph(390594560)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(245@216) corner: (261@232)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(245@216) mouseOver nil nil]
		targetOffset: 	(133.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3023653 245 216 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(708575232) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(334@299) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(708575232) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(334@299) mouseUp 3004757 nil]
		focusHolder: 	a MenuMorph(390594560)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(245@216) corner: (261@232)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(245@216) mouseOver nil nil]
		targetOffset: 	(133.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3023653 245 216 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(334@299) mouseUp 3004757 nil]
		focusHolder: 	a MenuMorph(390594560)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(245@216) corner: (261@232)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(245@216) mouseOver nil nil]
		targetOffset: 	(133.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3023653 245 216 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(334@299) mouseUp 3004757 nil]
	Receiver's instance variables: 
		bounds: 	(245@216) corner: (261@232)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(245@216) mouseOver nil nil]
		targetOffset: 	(133.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3023653 245 216 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(334@299) mouseUp 3004757 nil]
		evt: 	[(334@299) mouseUp 3004757 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(245@216) corner: (261@232)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(245@216) mouseOver nil nil]
		targetOffset: 	(133.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3023653 245 216 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(334@299) mouseUp 3004757 nil]
		evtBuf: 	#(1 3004757 334 299 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(245@216) corner: (261@232)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(245@216) mouseOver nil nil]
		targetOffset: 	(133.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3023653 245 216 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (1280@977)
		canvas: 	a FormCanvas on: DisplayScreen(1280x977x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(277348352))(an OBSys...etc...
		lastStepTime: 	3023837
		lastStepMessage: 	nil
		lastCycleTime: 	3023837
		alarms: 	a Heap()
		lastAlarmTime: 	3023837
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
Compte class(Object)>>doesNotUnderstand: #initialize:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[editor mouseUp: evt] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Compte>>a
12 November 2013 11:02:29.312 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

Compte(Object)>>doesNotUnderstand: #a
	Receiver: a Compte
	Arguments and temporary variables: 
		aMessage: 	a
		exception: 	MessageNotUnderstood: Compte>>a
		resumeValue: 	nil
	Receiver's instance variables: 
		proprio: 	#Dupont
		solde: 	550


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(914096128)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C1 a Compte a Compte
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(845152256)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(914096128)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(70 to: 69)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(70 to: 69)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(914096128)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(216268800)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (996671488) [other:  (blinkStart -> 3200229) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C1 := Compte new initialize: #Dupont
C1 deposer: 500
C1 depos...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(1018691584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(70 to: 69)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(70 to: 69)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(1018691584)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(708575232) a PluggableTextMorph(10...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1027080192)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[(228@381) mouseUp 3200869 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(201.0@376.0) corner: (344.0@394.0)
		owner: 	a MenuMorph(1028915200)
		submorphs: 	#()
		fullBounds: 	(201.0@376.0) corner: (344.0@394.0)
		color: 	Color black
		extension: 	a MorphExtension (1037303808)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1027080192)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[(228@381) mouseUp 3200869 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(201.0@376.0) corner: (344.0@394.0)
		owner: 	a MenuMorph(1028915200)
		submorphs: 	#()
		fullBounds: 	(201.0@376.0) corner: (344.0@394.0)
		color: 	Color black
		extension: 	a MorphExtension (1037303808)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(1027080192)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[(228@381) mouseUp 3200869 nil]
	Receiver's instance variables: 
		bounds: 	(201.0@376.0) corner: (344.0@394.0)
		owner: 	a MenuMorph(1028915200)
		submorphs: 	#()
		fullBounds: 	(201.0@376.0) corner: (344.0@394.0)
		color: 	Color black
		extension: 	a MorphExtension (1037303808)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(1027080192)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[(228@381) mouseUp 3200869 nil]
	Receiver's instance variables: 
		bounds: 	(201.0@376.0) corner: (344.0@394.0)
		owner: 	a MenuMorph(1028915200)
		submorphs: 	#()
		fullBounds: 	(201.0@376.0) corner: (344.0@394.0)
		color: 	Color black
		extension: 	a MorphExtension (1037303808)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(228@381) mouseUp 3200869 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(1027080192)'Inspect it (i)'
	Receiver's instance variables: 
		timeStamp: 	3200869
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(228@381)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(1027080192)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[(228@381) mouseUp 3200869 nil]
	Receiver's instance variables: 
		bounds: 	(201.0@376.0) corner: (344.0@394.0)
		owner: 	a MenuMorph(1028915200)
		submorphs: 	#()
		fullBounds: 	(201.0@376.0) corner: (344.0@394.0)
		color: 	Color black
		extension: 	a MorphExtension (1037303808)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(228@381) mouseUp 3200869 nil]
		aMorph: 	a ToggleMenuItemMorph(1027080192)'Inspect it (i)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(228@381) mouseUp 3200869 nil]
		aMorph: 	a ToggleMenuItemMorph(1027080192)'Inspect it (i)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(1027080192)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[(228@381) mouseUp 3200869 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(201.0@376.0) corner: (344.0@394.0)
		owner: 	a MenuMorph(1028915200)
		submorphs: 	#()
		fullBounds: 	(201.0@376.0) corner: (344.0@394.0)
		color: 	Color black
		extension: 	a MorphExtension (1037303808)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(228@381) mouseUp 3200869 nil]
		aMorph: 	a MenuMorph(1028915200)
		localEvt: 	[(228@381) mouseUp 3200869 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(1027080192)'Inspect it (i)'
		morphs: 	an Array(a ToggleMenuItemMorph(861143040)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(228@381) mouseUp 3200869 nil]
		aMorph: 	a MenuMorph(1028915200)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1028915200)
	Arguments and temporary variables: 
		anEvent: 	[(228@381) mouseUp 3200869 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(196.0@333.0) corner: (349.0@673.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(861143040)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(196.0@333.0) corner: (349.0@673.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1043857408) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1027080192)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(861143040)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1028915200)
	Arguments and temporary variables: 
		anEvent: 	[(228@381) mouseUp 3200869 nil]
	Receiver's instance variables: 
		bounds: 	(196.0@333.0) corner: (349.0@673.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(861143040)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(196.0@333.0) corner: (349.0@673.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1043857408) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1027080192)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(861143040)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(1028915200)
	Arguments and temporary variables: 
		evt: 	[(228@381) mouseUp 3200869 nil]
	Receiver's instance variables: 
		bounds: 	(196.0@333.0) corner: (349.0@673.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(861143040)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(196.0@333.0) corner: (349.0@673.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1043857408) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1027080192)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(861143040)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(228@381) mouseUp 3200869 nil]
		focusHolder: 	a MenuMorph(1028915200)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(228@381) corner: (244@397)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(228@381) mouseOver nil nil]
		targetOffset: 	(27.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3200869 228 381 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(708575232) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(228@381) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(708575232) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(228@381) mouseUp 3200869 nil]
		focusHolder: 	a MenuMorph(1028915200)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(228@381) corner: (244@397)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(228@381) mouseOver nil nil]
		targetOffset: 	(27.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3200869 228 381 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(228@381) mouseUp 3200869 nil]
		focusHolder: 	a MenuMorph(1028915200)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(228@381) corner: (244@397)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(228@381) mouseOver nil nil]
		targetOffset: 	(27.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3200869 228 381 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(228@381) mouseUp 3200869 nil]
	Receiver's instance variables: 
		bounds: 	(228@381) corner: (244@397)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(228@381) mouseOver nil nil]
		targetOffset: 	(27.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3200869 228 381 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(228@381) mouseUp 3200869 nil]
		evt: 	[(228@381) mouseUp 3200869 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(228@381) corner: (244@397)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(228@381) mouseOver nil nil]
		targetOffset: 	(27.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3200869 228 381 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(228@381) mouseUp 3200869 nil]
		evtBuf: 	#(1 3200869 228 381 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(228@381) corner: (244@397)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(228@381) mouseOver nil nil]
		targetOffset: 	(27.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3200869 228 381 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (1280@977)
		canvas: 	a FormCanvas on: DisplayScreen(1280x977x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(277348352))(an OBSys...etc...
		lastStepTime: 	3201059
		lastStepMessage: 	nil
		lastCycleTime: 	3201057
		alarms: 	a Heap()
		lastAlarmTime: 	3201059
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
Compte(Object)>>doesNotUnderstand: #a
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[editor mouseUp: evt] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubclassResponsibility: Exception had the subclass responsibility to implement #defaultAction
12 November 2013 11:09:13.79 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

Exception(Object)>>subclassResponsibility
	Receiver: Exception: solde insuffisant pour un retrait de 1000
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'solde insuffisant pour un retrait de 1000'
		tag: 	nil
		signaler: 	a Compte
		signalContext: 	Exception>>signal
		handlerContext: 	nil
		outerContext: 	nil


Exception>>defaultAction
	Receiver: Exception: solde insuffisant pour un retrait de 1000
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'solde insuffisant pour un retrait de 1000'
		tag: 	nil
		signaler: 	a Compte
		signalContext: 	Exception>>signal
		handlerContext: 	nil
		outerContext: 	nil


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	Exception: solde insuffisant pour un retrait de 1000
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Exception: solde insuffisant pour un retrait de 1000
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Exception: solde insuffisant pour un retrait de 1000
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Exception: solde insuffisant pour un retrait de 1000
		val: 	nil
	Receiver's instance variables: 
		sender: 	SmalltalkEditor>>evaluateSelectionAndDo:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStr...etc...


Exception>>signal
	Receiver: Exception: solde insuffisant pour un retrait de 1000
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'solde insuffisant pour un retrait de 1000'
		tag: 	nil
		signaler: 	a Compte
		signalContext: 	Exception>>signal
		handlerContext: 	nil
		outerContext: 	nil


Exception>>signal:
	Receiver: Exception: solde insuffisant pour un retrait de 1000
	Arguments and temporary variables: 
		signalerText: 	'solde insuffisant pour un retrait de 1000'
	Receiver's instance variables: 
		messageText: 	'solde insuffisant pour un retrait de 1000'
		tag: 	nil
		signaler: 	a Compte
		signalContext: 	Exception>>signal
		handlerContext: 	nil
		outerContext: 	nil


Exception class>>signal:
	Receiver: Exception
	Arguments and temporary variables: 
		signalerText: 	'solde insuffisant pour un retrait de 1000'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#debug->(Exception>>#debug "a CompiledMethod(559...etc...
		format: 	142
		instanceVariables: 	#('messageText' 'tag' 'signaler' 'signalContext' 'handlerCon...etc...
		organization: 	('*SUnit-Core' sunitExitWith:)
('accessing' defaultAction descrip...etc...
		subclasses: 	{Error. IllegalResumeAttempt. Notification. ProgressInitiationExcep...etc...
		name: 	#Exception
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Exceptions'
		traitComposition: 	{}
		localSelectors: 	nil


Compte>>retrait:
	Receiver: a Compte
	Arguments and temporary variables: 
		unMontant: 	1000
	Receiver's instance variables: 
		proprio: 	#Dupont
		solde: 	550


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(914096128)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C1 retrait: 1000
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(444858368)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(914096128)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(85 to: 84)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(85 to: 84)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(914096128)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(216268800)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (996671488) [other:  (blinkStart -> 3604545) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C1 := Compte new initialize: #Dupont
C1 deposer: 500
C1 depos...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(1018691584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(85 to: 84)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(185.0@284.0) corner: (625.0@451.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(185@284) corner: (625@451)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(85 to: 84)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(1018691584)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(708575232) a PluggableTextMorph(10...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(302776320)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(257@340) mouseUp 3605357 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(239.0@333.0) corner: (382.0@351.0)
		owner: 	a MenuMorph(143130624)
		submorphs: 	#()
		fullBounds: 	(239.0@333.0) corner: (382.0@351.0)
		color: 	Color black
		extension: 	a MorphExtension (312999936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(302776320)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(257@340) mouseUp 3605357 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(239.0@333.0) corner: (382.0@351.0)
		owner: 	a MenuMorph(143130624)
		submorphs: 	#()
		fullBounds: 	(239.0@333.0) corner: (382.0@351.0)
		color: 	Color black
		extension: 	a MorphExtension (312999936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(302776320)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(257@340) mouseUp 3605357 nil]
	Receiver's instance variables: 
		bounds: 	(239.0@333.0) corner: (382.0@351.0)
		owner: 	a MenuMorph(143130624)
		submorphs: 	#()
		fullBounds: 	(239.0@333.0) corner: (382.0@351.0)
		color: 	Color black
		extension: 	a MorphExtension (312999936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(302776320)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(257@340) mouseUp 3605357 nil]
	Receiver's instance variables: 
		bounds: 	(239.0@333.0) corner: (382.0@351.0)
		owner: 	a MenuMorph(143130624)
		submorphs: 	#()
		fullBounds: 	(239.0@333.0) corner: (382.0@351.0)
		color: 	Color black
		extension: 	a MorphExtension (312999936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(257@340) mouseUp 3605357 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(302776320)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	3605357
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(257@340)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(302776320)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(257@340) mouseUp 3605357 nil]
	Receiver's instance variables: 
		bounds: 	(239.0@333.0) corner: (382.0@351.0)
		owner: 	a MenuMorph(143130624)
		submorphs: 	#()
		fullBounds: 	(239.0@333.0) corner: (382.0@351.0)
		color: 	Color black
		extension: 	a MorphExtension (312999936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(257@340) mouseUp 3605357 nil]
		aMorph: 	a ToggleMenuItemMorph(302776320)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(257@340) mouseUp 3605357 nil]
		aMorph: 	a ToggleMenuItemMorph(302776320)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(302776320)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(257@340) mouseUp 3605357 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(239.0@333.0) corner: (382.0@351.0)
		owner: 	a MenuMorph(143130624)
		submorphs: 	#()
		fullBounds: 	(239.0@333.0) corner: (382.0@351.0)
		color: 	Color black
		extension: 	a MorphExtension (312999936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(257@340) mouseUp 3605357 nil]
		aMorph: 	a MenuMorph(143130624)
		localEvt: 	[(257@340) mouseUp 3605357 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(302776320)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(302776320)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(257@340) mouseUp 3605357 nil]
		aMorph: 	a MenuMorph(143130624)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(143130624)
	Arguments and temporary variables: 
		anEvent: 	[(257@340) mouseUp 3605357 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(234.0@328.0) corner: (387.0@668.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(302776320)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(234.0@328.0) corner: (387.0@668.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (158072832) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(302776320)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(302776320)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(143130624)
	Arguments and temporary variables: 
		anEvent: 	[(257@340) mouseUp 3605357 nil]
	Receiver's instance variables: 
		bounds: 	(234.0@328.0) corner: (387.0@668.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(302776320)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(234.0@328.0) corner: (387.0@668.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (158072832) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(302776320)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(302776320)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(143130624)
	Arguments and temporary variables: 
		evt: 	[(257@340) mouseUp 3605357 nil]
	Receiver's instance variables: 
		bounds: 	(234.0@328.0) corner: (387.0@668.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(302776320)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(234.0@328.0) corner: (387.0@668.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (158072832) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(302776320)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(302776320)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(257@340) mouseUp 3605357 nil]
		focusHolder: 	a MenuMorph(143130624)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(257@340) corner: (273@356)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(257@340) corner: (273@356)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(257@340) mouseOver nil nil]
		targetOffset: 	(18.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3605357 257 340 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
Exception(Object)>>subclassResponsibility
Exception>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
Exception>>signal
Exception>>signal:
Exception class>>signal:
Compte>>retrait:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[editor mouseUp: evt] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubclassResponsibility: Exception had the subclass responsibility to implement #defaultAction
12 November 2013 11:13:01.346 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

Exception(Object)>>subclassResponsibility
	Receiver: Exception: solde insuffisant pour un retrait de 100
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'solde insuffisant pour un retrait de 100'
		tag: 	nil
		signaler: 	a Compte
		signalContext: 	Exception>>signal
		handlerContext: 	nil
		outerContext: 	nil


Exception>>defaultAction
	Receiver: Exception: solde insuffisant pour un retrait de 100
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'solde insuffisant pour un retrait de 100'
		tag: 	nil
		signaler: 	a Compte
		signalContext: 	Exception>>signal
		handlerContext: 	nil
		outerContext: 	nil


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	Exception: solde insuffisant pour un retrait de 100
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Exception: solde insuffisant pour un retrait de 100
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Exception: solde insuffisant pour un retrait de 100
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Exception: solde insuffisant pour un retrait de 100
		val: 	nil
	Receiver's instance variables: 
		sender: 	SmalltalkEditor>>evaluateSelectionAndDo:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStr...etc...


Exception>>signal
	Receiver: Exception: solde insuffisant pour un retrait de 100
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'solde insuffisant pour un retrait de 100'
		tag: 	nil
		signaler: 	a Compte
		signalContext: 	Exception>>signal
		handlerContext: 	nil
		outerContext: 	nil


Exception>>signal:
	Receiver: Exception: solde insuffisant pour un retrait de 100
	Arguments and temporary variables: 
		signalerText: 	'solde insuffisant pour un retrait de 100'
	Receiver's instance variables: 
		messageText: 	'solde insuffisant pour un retrait de 100'
		tag: 	nil
		signaler: 	a Compte
		signalContext: 	Exception>>signal
		handlerContext: 	nil
		outerContext: 	nil


Exception class>>signal:
	Receiver: Exception
	Arguments and temporary variables: 
		signalerText: 	'solde insuffisant pour un retrait de 100'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#debug->(Exception>>#debug "a CompiledMethod(559...etc...
		format: 	142
		instanceVariables: 	#('messageText' 'tag' 'signaler' 'signalContext' 'handlerCon...etc...
		organization: 	('*SUnit-Core' sunitExitWith:)
('accessing' defaultAction descrip...etc...
		subclasses: 	{Error. IllegalResumeAttempt. Notification. ProgressInitiationExcep...etc...
		name: 	#Exception
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Exceptions'
		traitComposition: 	{}
		localSelectors: 	nil


Compte>>retrait:
	Receiver: a Compte
	Arguments and temporary variables: 
		unMontant: 	100
	Receiver's instance variables: 
		proprio: 	#Dupont
		solde: 	50


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(914096128)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C1 retrait: 100
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(534249472)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(914096128)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(476.0@476.0) corner: (916.0@643.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(476.0@476.0) corner: (916.0@643.0)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(84 to: 83)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(476.0@476.0) corner: (916.0@643.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(476.0@476.0) corner: (916.0@643.0)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(84 to: 83)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(914096128)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(216268800)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (996671488) [other:  (blinkStart -> 3832451) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C1 := Compte new initialize: #Dupont
C1 deposer: 500
C1 depos...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(1018691584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(476.0@476.0) corner: (916.0@643.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(476.0@476.0) corner: (916.0@643.0)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(84 to: 83)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(476.0@476.0) corner: (916.0@643.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(476.0@476.0) corner: (916.0@643.0)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(84 to: 83)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(1018691584)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(708575232) a PluggableTextMorph(10...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(601620480)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[(588@581) mouseUp 3832925 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(564.0@573.0) corner: (707.0@591.0)
		owner: 	a MenuMorph(920649728)
		submorphs: 	#()
		fullBounds: 	(564.0@573.0) corner: (707.0@591.0)
		color: 	Color black
		extension: 	a MorphExtension (611844096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(601620480)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[(588@581) mouseUp 3832925 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(564.0@573.0) corner: (707.0@591.0)
		owner: 	a MenuMorph(920649728)
		submorphs: 	#()
		fullBounds: 	(564.0@573.0) corner: (707.0@591.0)
		color: 	Color black
		extension: 	a MorphExtension (611844096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(601620480)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[(588@581) mouseUp 3832925 nil]
	Receiver's instance variables: 
		bounds: 	(564.0@573.0) corner: (707.0@591.0)
		owner: 	a MenuMorph(920649728)
		submorphs: 	#()
		fullBounds: 	(564.0@573.0) corner: (707.0@591.0)
		color: 	Color black
		extension: 	a MorphExtension (611844096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(601620480)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[(588@581) mouseUp 3832925 nil]
	Receiver's instance variables: 
		bounds: 	(564.0@573.0) corner: (707.0@591.0)
		owner: 	a MenuMorph(920649728)
		submorphs: 	#()
		fullBounds: 	(564.0@573.0) corner: (707.0@591.0)
		color: 	Color black
		extension: 	a MorphExtension (611844096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(588@581) mouseUp 3832925 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(601620480)'Inspect it (i)'
	Receiver's instance variables: 
		timeStamp: 	3832925
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(588@581)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(601620480)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[(588@581) mouseUp 3832925 nil]
	Receiver's instance variables: 
		bounds: 	(564.0@573.0) corner: (707.0@591.0)
		owner: 	a MenuMorph(920649728)
		submorphs: 	#()
		fullBounds: 	(564.0@573.0) corner: (707.0@591.0)
		color: 	Color black
		extension: 	a MorphExtension (611844096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(588@581) mouseUp 3832925 nil]
		aMorph: 	a ToggleMenuItemMorph(601620480)'Inspect it (i)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(588@581) mouseUp 3832925 nil]
		aMorph: 	a ToggleMenuItemMorph(601620480)'Inspect it (i)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(601620480)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[(588@581) mouseUp 3832925 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(564.0@573.0) corner: (707.0@591.0)
		owner: 	a MenuMorph(920649728)
		submorphs: 	#()
		fullBounds: 	(564.0@573.0) corner: (707.0@591.0)
		color: 	Color black
		extension: 	a MorphExtension (611844096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(588@581) mouseUp 3832925 nil]
		aMorph: 	a MenuMorph(920649728)
		localEvt: 	[(588@581) mouseUp 3832925 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(601620480)'Inspect it (i)'
		morphs: 	an Array(a ToggleMenuItemMorph(435683328)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(588@581) mouseUp 3832925 nil]
		aMorph: 	a MenuMorph(920649728)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(920649728)
	Arguments and temporary variables: 
		anEvent: 	[(588@581) mouseUp 3832925 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(559.0@530.0) corner: (712.0@870.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(435683328)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(559.0@530.0) corner: (712.0@870.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (935591936) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(601620480)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(435683328)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(920649728)
	Arguments and temporary variables: 
		anEvent: 	[(588@581) mouseUp 3832925 nil]
	Receiver's instance variables: 
		bounds: 	(559.0@530.0) corner: (712.0@870.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(435683328)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(559.0@530.0) corner: (712.0@870.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (935591936) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(601620480)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(435683328)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(920649728)
	Arguments and temporary variables: 
		evt: 	[(588@581) mouseUp 3832925 nil]
	Receiver's instance variables: 
		bounds: 	(559.0@530.0) corner: (712.0@870.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(435683328)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(559.0@530.0) corner: (712.0@870.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (935591936) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(601620480)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(435683328)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(588@581) mouseUp 3832925 nil]
		focusHolder: 	a MenuMorph(920649728)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(588@581) corner: (604@597)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@581) mouseOver nil nil]
		targetOffset: 	(24.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3832925 588 581 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(708575232) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
Exception(Object)>>subclassResponsibility
Exception>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
Exception>>signal
Exception>>signal:
Exception class>>signal:
Compte>>retrait:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[editor mouseUp: evt] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: solde insuffisant pour un retrait de 100
12 November 2013 11:16:37.18 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

Compte(Object)>>error:
	Receiver: a Compte
	Arguments and temporary variables: 
		aString: 	'solde insuffisant pour un retrait de 100'
	Receiver's instance variables: 
		proprio: 	#Dupont
		solde: 	50


Compte>>retrait:
	Receiver: a Compte
	Arguments and temporary variables: 
		unMontant: 	100
	Receiver's instance variables: 
		proprio: 	#Dupont
		solde: 	50


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(914096128)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C1 retrait: 100
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(431751168)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(914096128)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(476.0@476.0) corner: (916.0@643.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(476@476) corner: (916@643)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(72 to: 86)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(476.0@476.0) corner: (916.0@643.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(476@476) corner: (916@643)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(72 to: 86)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(914096128)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(216268800)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (996671488) [other:  (blinkStart -> 4048551) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C1 := Compte new initialize: #Dupont.
C1 deposer: 500.
C1 dep...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(1018691584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(476.0@476.0) corner: (916.0@643.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(476@476) corner: (916@643)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(72 to: 86)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(476.0@476.0) corner: (916.0@643.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(476@476) corner: (916@643)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(72 to: 86)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(1018691584)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(708575232) a PluggableTextMorph(10...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(53739520)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[(584@574) mouseUp 4048749 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(571.0@570.0) corner: (714.0@588.0)
		owner: 	a MenuMorph(527171584)
		submorphs: 	#()
		fullBounds: 	(571.0@570.0) corner: (714.0@588.0)
		color: 	Color black
		extension: 	a MorphExtension (63963136)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(53739520)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[(584@574) mouseUp 4048749 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(571.0@570.0) corner: (714.0@588.0)
		owner: 	a MenuMorph(527171584)
		submorphs: 	#()
		fullBounds: 	(571.0@570.0) corner: (714.0@588.0)
		color: 	Color black
		extension: 	a MorphExtension (63963136)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(53739520)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[(584@574) mouseUp 4048749 nil]
	Receiver's instance variables: 
		bounds: 	(571.0@570.0) corner: (714.0@588.0)
		owner: 	a MenuMorph(527171584)
		submorphs: 	#()
		fullBounds: 	(571.0@570.0) corner: (714.0@588.0)
		color: 	Color black
		extension: 	a MorphExtension (63963136)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(53739520)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[(584@574) mouseUp 4048749 nil]
	Receiver's instance variables: 
		bounds: 	(571.0@570.0) corner: (714.0@588.0)
		owner: 	a MenuMorph(527171584)
		submorphs: 	#()
		fullBounds: 	(571.0@570.0) corner: (714.0@588.0)
		color: 	Color black
		extension: 	a MorphExtension (63963136)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(584@574) mouseUp 4048749 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(53739520)'Inspect it (i)'
	Receiver's instance variables: 
		timeStamp: 	4048749
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(584@574)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(53739520)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[(584@574) mouseUp 4048749 nil]
	Receiver's instance variables: 
		bounds: 	(571.0@570.0) corner: (714.0@588.0)
		owner: 	a MenuMorph(527171584)
		submorphs: 	#()
		fullBounds: 	(571.0@570.0) corner: (714.0@588.0)
		color: 	Color black
		extension: 	a MorphExtension (63963136)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(584@574) mouseUp 4048749 nil]
		aMorph: 	a ToggleMenuItemMorph(53739520)'Inspect it (i)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(584@574) mouseUp 4048749 nil]
		aMorph: 	a ToggleMenuItemMorph(53739520)'Inspect it (i)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(53739520)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[(584@574) mouseUp 4048749 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(571.0@570.0) corner: (714.0@588.0)
		owner: 	a MenuMorph(527171584)
		submorphs: 	#()
		fullBounds: 	(571.0@570.0) corner: (714.0@588.0)
		color: 	Color black
		extension: 	a MorphExtension (63963136)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(584@574) mouseUp 4048749 nil]
		aMorph: 	a MenuMorph(527171584)
		localEvt: 	[(584@574) mouseUp 4048749 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(53739520)'Inspect it (i)'
		morphs: 	an Array(a ToggleMenuItemMorph(961544192)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(584@574) mouseUp 4048749 nil]
		aMorph: 	a MenuMorph(527171584)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(527171584)
	Arguments and temporary variables: 
		anEvent: 	[(584@574) mouseUp 4048749 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(566.0@527.0) corner: (719.0@867.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(961544192)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(566.0@527.0) corner: (719.0@867.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (542113792) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(53739520)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(961544192)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(527171584)
	Arguments and temporary variables: 
		anEvent: 	[(584@574) mouseUp 4048749 nil]
	Receiver's instance variables: 
		bounds: 	(566.0@527.0) corner: (719.0@867.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(961544192)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(566.0@527.0) corner: (719.0@867.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (542113792) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(53739520)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(961544192)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(527171584)
	Arguments and temporary variables: 
		evt: 	[(584@574) mouseUp 4048749 nil]
	Receiver's instance variables: 
		bounds: 	(566.0@527.0) corner: (719.0@867.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(961544192)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(566.0@527.0) corner: (719.0@867.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (542113792) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(53739520)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(961544192)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(584@574) mouseUp 4048749 nil]
		focusHolder: 	a MenuMorph(527171584)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(584@574) corner: (600@590)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(584@574) mouseOver nil nil]
		targetOffset: 	(13.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4048749 584 574 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(708575232) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(584@574) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(708575232) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(584@574) mouseUp 4048749 nil]
		focusHolder: 	a MenuMorph(527171584)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(584@574) corner: (600@590)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(584@574) mouseOver nil nil]
		targetOffset: 	(13.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4048749 584 574 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(584@574) mouseUp 4048749 nil]
		focusHolder: 	a MenuMorph(527171584)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(584@574) corner: (600@590)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(584@574) mouseOver nil nil]
		targetOffset: 	(13.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4048749 584 574 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(584@574) mouseUp 4048749 nil]
	Receiver's instance variables: 
		bounds: 	(584@574) corner: (600@590)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(584@574) mouseOver nil nil]
		targetOffset: 	(13.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4048749 584 574 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(584@574) mouseUp 4048749 nil]
		evt: 	[(584@574) mouseUp 4048749 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(584@574) corner: (600@590)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(584@574) mouseOver nil nil]
		targetOffset: 	(13.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4048749 584 574 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(584@574) mouseUp 4048749 nil]
		evtBuf: 	#(1 4048749 584 574 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(584@574) corner: (600@590)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(584@574) mouseOver nil nil]
		targetOffset: 	(13.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4048749 584 574 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (1280@977)
		canvas: 	a FormCanvas on: DisplayScreen(1280x977x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(277348352))(an OBSys...etc...
		lastStepTime: 	4048921
		lastStepMessage: 	nil
		lastCycleTime: 	4048921
		alarms: 	a Heap()
		lastAlarmTime: 	4048921
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
Compte(Object)>>error:
Compte>>retrait:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[editor mouseUp: evt] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: solde insuffisant pour un retrait de 100
12 November 2013 11:16:42.794 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

Compte(Object)>>error:
	Receiver: a Compte
	Arguments and temporary variables: 
		aString: 	'solde insuffisant pour un retrait de 100'
	Receiver's instance variables: 
		proprio: 	#Dupont
		solde: 	50


Compte>>retrait:
	Receiver: a Compte
	Arguments and temporary variables: 
		unMontant: 	100
	Receiver's instance variables: 
		proprio: 	#Dupont
		solde: 	50


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(914096128)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C1 retrait: 100
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(775421952)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(914096128)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(914096128)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(476.0@476.0) corner: (916.0@643.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(476@476) corner: (916@643)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(72 to: 86)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(476.0@476.0) corner: (916.0@643.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(476@476) corner: (916@643)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(72 to: 86)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(914096128)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(216268800)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (996671488) [other:  (blinkStart -> 4053539) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C1 := Compte new initialize: #Dupont.
C1 deposer: 500.
C1 dep...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(1018691584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(476.0@476.0) corner: (916.0@643.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(476@476) corner: (916@643)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(72 to: 86)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(1018691584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(476.0@476.0) corner: (916.0@643.0)
		owner: 	a SystemWindow(708575232)
		submorphs: 	an Array(a TransformMorph(216268800))
		fullBounds: 	(476@476) corner: (916@643)
		color: 	Color white
		extension: 	a MorphExtension (892862464) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1046478848)
		scroller: 	a TransformMorph(216268800)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(102498304)
		textMorph: 	a TextMorphForEditView(914096128)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(72 to: 86)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(1018691584)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(708575232) a PluggableTextMorph(10...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(58458112)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(538@526) mouseUp 4054333 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(522.0@524.0) corner: (665.0@542.0)
		owner: 	a MenuMorph(554172416)
		submorphs: 	#()
		fullBounds: 	(522.0@524.0) corner: (665.0@542.0)
		color: 	Color black
		extension: 	a MorphExtension (68681728)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(58458112)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(538@526) mouseUp 4054333 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(522.0@524.0) corner: (665.0@542.0)
		owner: 	a MenuMorph(554172416)
		submorphs: 	#()
		fullBounds: 	(522.0@524.0) corner: (665.0@542.0)
		color: 	Color black
		extension: 	a MorphExtension (68681728)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(58458112)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(538@526) mouseUp 4054333 nil]
	Receiver's instance variables: 
		bounds: 	(522.0@524.0) corner: (665.0@542.0)
		owner: 	a MenuMorph(554172416)
		submorphs: 	#()
		fullBounds: 	(522.0@524.0) corner: (665.0@542.0)
		color: 	Color black
		extension: 	a MorphExtension (68681728)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(58458112)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(538@526) mouseUp 4054333 nil]
	Receiver's instance variables: 
		bounds: 	(522.0@524.0) corner: (665.0@542.0)
		owner: 	a MenuMorph(554172416)
		submorphs: 	#()
		fullBounds: 	(522.0@524.0) corner: (665.0@542.0)
		color: 	Color black
		extension: 	a MorphExtension (68681728)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(538@526) mouseUp 4054333 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(58458112)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	4054333
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(538@526)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(58458112)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(538@526) mouseUp 4054333 nil]
	Receiver's instance variables: 
		bounds: 	(522.0@524.0) corner: (665.0@542.0)
		owner: 	a MenuMorph(554172416)
		submorphs: 	#()
		fullBounds: 	(522.0@524.0) corner: (665.0@542.0)
		color: 	Color black
		extension: 	a MorphExtension (68681728)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(538@526) mouseUp 4054333 nil]
		aMorph: 	a ToggleMenuItemMorph(58458112)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(538@526) mouseUp 4054333 nil]
		aMorph: 	a ToggleMenuItemMorph(58458112)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(58458112)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(538@526) mouseUp 4054333 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(522.0@524.0) corner: (665.0@542.0)
		owner: 	a MenuMorph(554172416)
		submorphs: 	#()
		fullBounds: 	(522.0@524.0) corner: (665.0@542.0)
		color: 	Color black
		extension: 	a MorphExtension (68681728)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(1018691584))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(538@526) mouseUp 4054333 nil]
		aMorph: 	a MenuMorph(554172416)
		localEvt: 	[(538@526) mouseUp 4054333 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(58458112)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(58458112)'Do it (d)' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(538@526) mouseUp 4054333 nil]
		aMorph: 	a MenuMorph(554172416)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(554172416)
	Arguments and temporary variables: 
		anEvent: 	[(538@526) mouseUp 4054333 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(517.0@519.0) corner: (670.0@859.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(58458112)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	(517.0@519.0) corner: (670.0@859.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (569114624) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(58458112)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(58458112)'Do it (d)' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(554172416)
	Arguments and temporary variables: 
		anEvent: 	[(538@526) mouseUp 4054333 nil]
	Receiver's instance variables: 
		bounds: 	(517.0@519.0) corner: (670.0@859.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(58458112)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	(517.0@519.0) corner: (670.0@859.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (569114624) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(58458112)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(58458112)'Do it (d)' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(554172416)
	Arguments and temporary variables: 
		evt: 	[(538@526) mouseUp 4054333 nil]
	Receiver's instance variables: 
		bounds: 	(517.0@519.0) corner: (670.0@859.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(58458112)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	(517.0@519.0) corner: (670.0@859.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (569114624) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(58458112)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(58458112)'Do it (d)' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(538@526) mouseUp 4054333 nil]
		focusHolder: 	a MenuMorph(554172416)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(538@526) corner: (554@542)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(538@526) corner: (554@542)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(538@526) mouseOver nil nil]
		targetOffset: 	(16.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4054333 538 526 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(708575232) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(538@526) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(708575232) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(538@526) mouseUp 4054333 nil]
		focusHolder: 	a MenuMorph(554172416)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(538@526) corner: (554@542)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(538@526) corner: (554@542)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(538@526) mouseOver nil nil]
		targetOffset: 	(16.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4054333 538 526 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(538@526) mouseUp 4054333 nil]
		focusHolder: 	a MenuMorph(554172416)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(538@526) corner: (554@542)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(538@526) corner: (554@542)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(538@526) mouseOver nil nil]
		targetOffset: 	(16.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4054333 538 526 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(538@526) mouseUp 4054333 nil]
	Receiver's instance variables: 
		bounds: 	(538@526) corner: (554@542)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(538@526) corner: (554@542)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(538@526) mouseOver nil nil]
		targetOffset: 	(16.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4054333 538 526 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(538@526) mouseUp 4054333 nil]
		evt: 	[(538@526) mouseUp 4054333 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(538@526) corner: (554@542)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(538@526) corner: (554@542)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(538@526) mouseOver nil nil]
		targetOffset: 	(16.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4054333 538 526 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(538@526) mouseUp 4054333 nil]
		evtBuf: 	#(1 4054333 538 526 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(538@526) corner: (554@542)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(538@526) corner: (554@542)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(538@526) mouseOver nil nil]
		targetOffset: 	(16.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4054333 538 526 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
Compte(Object)>>error:
Compte>>retrait:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[editor mouseUp: evt] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: OrderedCollection>>add:initialize:
12 November 2013 11:26:25.356 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Object)>>doesNotUnderstand: #add:initialize:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		aMessage: 	add: a Compte initialize: #TOTO
		exception: 	MessageNotUnderstood: OrderedCollection>>add:initialize:
		resumeValue: 	nil
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


Bank>>definirComptePour:
	Receiver: a Bank
	Arguments and temporary variables: 
		unePersonne: 	#TOTO
	Receiver's instance variables: 
		comptes: 	an OrderedCollection()
		name: 	#BNP


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(396361728)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	B := Bank new name: #BNP.
	^ B definirComptePour: #TOTO
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(778043392)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(396361728)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(396361728)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@34)
		owner: 	a TransformMorph(768081920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@34)
		color: 	Color black
		extension: 	a MorphExtension (478937088) [other:  (blinkStart -> 4637425) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'B := Bank new name: #BNP.
B definirComptePour: #TOTO'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(608436224)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(608436224)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(149946368) a PluggableTextMorph(60...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(2097152)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(189@518) mouseUp 4633301 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(172.0@513.0) corner: (315.0@531.0)
		owner: 	a MenuMorph(614989824)
		submorphs: 	#()
		fullBounds: 	(172.0@513.0) corner: (315.0@531.0)
		color: 	Color black
		extension: 	a MorphExtension (12320768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(2097152)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(189@518) mouseUp 4633301 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(172.0@513.0) corner: (315.0@531.0)
		owner: 	a MenuMorph(614989824)
		submorphs: 	#()
		fullBounds: 	(172.0@513.0) corner: (315.0@531.0)
		color: 	Color black
		extension: 	a MorphExtension (12320768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(2097152)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(189@518) mouseUp 4633301 nil]
	Receiver's instance variables: 
		bounds: 	(172.0@513.0) corner: (315.0@531.0)
		owner: 	a MenuMorph(614989824)
		submorphs: 	#()
		fullBounds: 	(172.0@513.0) corner: (315.0@531.0)
		color: 	Color black
		extension: 	a MorphExtension (12320768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(2097152)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(189@518) mouseUp 4633301 nil]
	Receiver's instance variables: 
		bounds: 	(172.0@513.0) corner: (315.0@531.0)
		owner: 	a MenuMorph(614989824)
		submorphs: 	#()
		fullBounds: 	(172.0@513.0) corner: (315.0@531.0)
		color: 	Color black
		extension: 	a MorphExtension (12320768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(189@518) mouseUp 4633301 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(2097152)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	4633301
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(189@518)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(2097152)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(189@518) mouseUp 4633301 nil]
	Receiver's instance variables: 
		bounds: 	(172.0@513.0) corner: (315.0@531.0)
		owner: 	a MenuMorph(614989824)
		submorphs: 	#()
		fullBounds: 	(172.0@513.0) corner: (315.0@531.0)
		color: 	Color black
		extension: 	a MorphExtension (12320768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(189@518) mouseUp 4633301 nil]
		aMorph: 	a ToggleMenuItemMorph(2097152)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(189@518) mouseUp 4633301 nil]
		aMorph: 	a ToggleMenuItemMorph(2097152)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(2097152)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(189@518) mouseUp 4633301 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(172.0@513.0) corner: (315.0@531.0)
		owner: 	a MenuMorph(614989824)
		submorphs: 	#()
		fullBounds: 	(172.0@513.0) corner: (315.0@531.0)
		color: 	Color black
		extension: 	a MorphExtension (12320768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(189@518) mouseUp 4633301 nil]
		aMorph: 	a MenuMorph(614989824)
		localEvt: 	[(189@518) mouseUp 4633301 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(2097152)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(2097152)'Do it (d)' a ToggleMenuItemMorp...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(189@518) mouseUp 4633301 nil]
		aMorph: 	a MenuMorph(614989824)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(614989824)
	Arguments and temporary variables: 
		anEvent: 	[(189@518) mouseUp 4633301 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(167.0@508.0) corner: (320.0@848.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(2097152)'Do it (d)' a ToggleMenuItemM...etc...
		fullBounds: 	(167.0@508.0) corner: (320.0@848.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (629932032) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(2097152)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(2097152)'Do it (d)' a Tog...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(614989824)
	Arguments and temporary variables: 
		anEvent: 	[(189@518) mouseUp 4633301 nil]
	Receiver's instance variables: 
		bounds: 	(167.0@508.0) corner: (320.0@848.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(2097152)'Do it (d)' a ToggleMenuItemM...etc...
		fullBounds: 	(167.0@508.0) corner: (320.0@848.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (629932032) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(2097152)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(2097152)'Do it (d)' a Tog...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(614989824)
	Arguments and temporary variables: 
		evt: 	[(189@518) mouseUp 4633301 nil]
	Receiver's instance variables: 
		bounds: 	(167.0@508.0) corner: (320.0@848.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(2097152)'Do it (d)' a ToggleMenuItemM...etc...
		fullBounds: 	(167.0@508.0) corner: (320.0@848.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (629932032) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(2097152)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(2097152)'Do it (d)' a Tog...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(189@518) mouseUp 4633301 nil]
		focusHolder: 	a MenuMorph(614989824)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(207@435) corner: (223@451)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(207@435) corner: (223@451)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(207@435) mouseOver nil nil]
		targetOffset: 	(187.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4637033 205 433 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(149946368) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(189@518) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(149946368) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(189@518) mouseUp 4633301 nil]
		focusHolder: 	a MenuMorph(614989824)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(218@444) corner: (234@460)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(218@444) corner: (234@460)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(218@444) mouseOver nil nil]
		targetOffset: 	(187.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4637055 208 436 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(189@518) mouseUp 4633301 nil]
		focusHolder: 	a MenuMorph(614989824)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(218@444) corner: (234@460)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(218@444) corner: (234@460)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(218@444) mouseOver nil nil]
		targetOffset: 	(187.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4637055 208 436 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(189@518) mouseUp 4633301 nil]
	Receiver's instance variables: 
		bounds: 	(218@444) corner: (234@460)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(218@444) corner: (234@460)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(218@444) mouseOver nil nil]
		targetOffset: 	(187.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4637055 208 436 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(189@518) mouseUp 4633301 nil]
		evt: 	[(189@518) mouseUp 4633301 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(218@444) corner: (234@460)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(218@444) corner: (234@460)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(218@444) mouseOver nil nil]
		targetOffset: 	(187.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4637055 208 436 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(189@518) mouseUp 4633301 nil]
		evtBuf: 	#(1 4633301 189 518 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(229@450) corner: (245@466)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(229@450) corner: (245@466)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(229@450) mouseOver nil nil]
		targetOffset: 	(187.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4637097 221 445 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
OrderedCollection(Object)>>doesNotUnderstand: #add:initialize:
Bank>>definirComptePour:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[editor mouseUp: evt] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "+" is nil
12 November 2013 11:33:53.334 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	+ 0
		exception: 	MessageNotUnderstood: receiver of "+" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[:each | result := result + each getSolde] in Bank>>getSolde
	Receiver: a Bank
	Arguments and temporary variables: 
		result: 	a Compte
		each: 	#(nil)
	Receiver's instance variables: 
		comptes: 	an OrderedCollection(a Compte a Compte)
		name: 	#BNP


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Compte a Compte)
	Arguments and temporary variables: 
		aBlock: 	[:each | result := result + each getSolde]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Compte a Compte nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Bank>>getSolde
	Receiver: a Bank
	Arguments and temporary variables: 
		result: 	#(nil)
	Receiver's instance variables: 
		comptes: 	an OrderedCollection(a Compte a Compte)
		name: 	#BNP


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(396361728)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ B getSolde
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(576192512)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(396361728)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(95 to: 94)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(95 to: 94)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(396361728)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(768081920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (478937088) [other:  (blinkStart -> 5084549) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'B := Bank new name: #BNP.
B definirComptePour: #TOTO.
B defin...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(608436224)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(95 to: 94)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(95 to: 94)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(608436224)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(149946368) a PluggableTextMorph(60...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(995098624)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(285@565) mouseUp 5084901 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(278.0@556.0) corner: (421.0@574.0)
		owner: 	a MenuMorph(253231104)
		submorphs: 	#()
		fullBounds: 	(278.0@556.0) corner: (421.0@574.0)
		color: 	Color black
		extension: 	a MorphExtension (1005322240)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(995098624)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(285@565) mouseUp 5084901 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(278.0@556.0) corner: (421.0@574.0)
		owner: 	a MenuMorph(253231104)
		submorphs: 	#()
		fullBounds: 	(278.0@556.0) corner: (421.0@574.0)
		color: 	Color black
		extension: 	a MorphExtension (1005322240)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(995098624)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(285@565) mouseUp 5084901 nil]
	Receiver's instance variables: 
		bounds: 	(278.0@556.0) corner: (421.0@574.0)
		owner: 	a MenuMorph(253231104)
		submorphs: 	#()
		fullBounds: 	(278.0@556.0) corner: (421.0@574.0)
		color: 	Color black
		extension: 	a MorphExtension (1005322240)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(995098624)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(285@565) mouseUp 5084901 nil]
	Receiver's instance variables: 
		bounds: 	(278.0@556.0) corner: (421.0@574.0)
		owner: 	a MenuMorph(253231104)
		submorphs: 	#()
		fullBounds: 	(278.0@556.0) corner: (421.0@574.0)
		color: 	Color black
		extension: 	a MorphExtension (1005322240)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(285@565) mouseUp 5084901 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(995098624)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5084901
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(285@565)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(995098624)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(285@565) mouseUp 5084901 nil]
	Receiver's instance variables: 
		bounds: 	(278.0@556.0) corner: (421.0@574.0)
		owner: 	a MenuMorph(253231104)
		submorphs: 	#()
		fullBounds: 	(278.0@556.0) corner: (421.0@574.0)
		color: 	Color black
		extension: 	a MorphExtension (1005322240)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(285@565) mouseUp 5084901 nil]
		aMorph: 	a ToggleMenuItemMorph(995098624)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(285@565) mouseUp 5084901 nil]
		aMorph: 	a ToggleMenuItemMorph(995098624)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(995098624)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(285@565) mouseUp 5084901 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(278.0@556.0) corner: (421.0@574.0)
		owner: 	a MenuMorph(253231104)
		submorphs: 	#()
		fullBounds: 	(278.0@556.0) corner: (421.0@574.0)
		color: 	Color black
		extension: 	a MorphExtension (1005322240)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(285@565) mouseUp 5084901 nil]
		aMorph: 	a MenuMorph(253231104)
		localEvt: 	[(285@565) mouseUp 5084901 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(995098624)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(995098624)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(285@565) mouseUp 5084901 nil]
		aMorph: 	a MenuMorph(253231104)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(253231104)
	Arguments and temporary variables: 
		anEvent: 	[(285@565) mouseUp 5084901 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(273.0@551.0) corner: (426.0@891.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(995098624)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(273.0@551.0) corner: (426.0@891.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (268173312) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(995098624)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(995098624)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(253231104)
	Arguments and temporary variables: 
		anEvent: 	[(285@565) mouseUp 5084901 nil]
	Receiver's instance variables: 
		bounds: 	(273.0@551.0) corner: (426.0@891.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(995098624)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(273.0@551.0) corner: (426.0@891.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (268173312) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(995098624)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(995098624)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(253231104)
	Arguments and temporary variables: 
		evt: 	[(285@565) mouseUp 5084901 nil]
	Receiver's instance variables: 
		bounds: 	(273.0@551.0) corner: (426.0@891.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(995098624)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(273.0@551.0) corner: (426.0@891.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (268173312) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(995098624)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(995098624)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(285@565) mouseUp 5084901 nil]
		focusHolder: 	a MenuMorph(253231104)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(285@565) corner: (301@581)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(285@565) corner: (301@581)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(285@565) mouseOver nil nil]
		targetOffset: 	(7.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5084901 285 565 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(149946368) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(285@565) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(149946368) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(285@565) mouseUp 5084901 nil]
		focusHolder: 	a MenuMorph(253231104)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(285@565) corner: (301@581)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(285@565) corner: (301@581)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(285@565) mouseOver nil nil]
		targetOffset: 	(7.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5084901 285 565 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(285@565) mouseUp 5084901 nil]
		focusHolder: 	a MenuMorph(253231104)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(285@565) corner: (301@581)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(285@565) corner: (301@581)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(285@565) mouseOver nil nil]
		targetOffset: 	(7.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5084901 285 565 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(285@565) mouseUp 5084901 nil]
	Receiver's instance variables: 
		bounds: 	(285@565) corner: (301@581)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(285@565) corner: (301@581)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(285@565) mouseOver nil nil]
		targetOffset: 	(7.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5084901 285 565 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
[:each | result := result + each getSolde] in Bank>>getSolde
OrderedCollection>>do:
Bank>>getSolde
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[editor mouseUp: evt] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "+" is nil
12 November 2013 11:34:02.596 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	+ 0
		exception: 	MessageNotUnderstood: receiver of "+" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[:each | result := result + each getSolde] in Bank>>getSolde
	Receiver: a Bank
	Arguments and temporary variables: 
		result: 	a Compte
		each: 	#(nil)
	Receiver's instance variables: 
		comptes: 	an OrderedCollection(a Compte a Compte)
		name: 	#BNP


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Compte a Compte)
	Arguments and temporary variables: 
		aBlock: 	[:each | result := result + each getSolde]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Compte a Compte nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Bank>>getSolde
	Receiver: a Bank
	Arguments and temporary variables: 
		result: 	#(nil)
	Receiver's instance variables: 
		comptes: 	an OrderedCollection(a Compte a Compte)
		name: 	#BNP


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(396361728)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	B := Bank new name: #BNP.
	B definirComptePour: #TOTO.
	B def...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(810811392)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(396361728)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(396361728)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(768081920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (478937088) [other:  (blinkStart -> 5094163) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'B := Bank new name: #BNP.
B definirComptePour: #TOTO.
B defin...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(608436224)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(608436224)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(149946368) a PluggableTextMorph(60...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(564920320)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(285@583) mouseUp 5094165 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(244.0@568.0) corner: (387.0@586.0)
		owner: 	a MenuMorph(254279680)
		submorphs: 	#()
		fullBounds: 	(244.0@568.0) corner: (387.0@586.0)
		color: 	Color black
		extension: 	a MorphExtension (575143936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(564920320)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(285@583) mouseUp 5094165 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(244.0@568.0) corner: (387.0@586.0)
		owner: 	a MenuMorph(254279680)
		submorphs: 	#()
		fullBounds: 	(244.0@568.0) corner: (387.0@586.0)
		color: 	Color black
		extension: 	a MorphExtension (575143936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(564920320)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(285@583) mouseUp 5094165 nil]
	Receiver's instance variables: 
		bounds: 	(244.0@568.0) corner: (387.0@586.0)
		owner: 	a MenuMorph(254279680)
		submorphs: 	#()
		fullBounds: 	(244.0@568.0) corner: (387.0@586.0)
		color: 	Color black
		extension: 	a MorphExtension (575143936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(564920320)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(285@583) mouseUp 5094165 nil]
	Receiver's instance variables: 
		bounds: 	(244.0@568.0) corner: (387.0@586.0)
		owner: 	a MenuMorph(254279680)
		submorphs: 	#()
		fullBounds: 	(244.0@568.0) corner: (387.0@586.0)
		color: 	Color black
		extension: 	a MorphExtension (575143936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(285@583) mouseUp 5094165 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(564920320)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5094165
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(285@583)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(564920320)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(285@583) mouseUp 5094165 nil]
	Receiver's instance variables: 
		bounds: 	(244.0@568.0) corner: (387.0@586.0)
		owner: 	a MenuMorph(254279680)
		submorphs: 	#()
		fullBounds: 	(244.0@568.0) corner: (387.0@586.0)
		color: 	Color black
		extension: 	a MorphExtension (575143936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(285@583) mouseUp 5094165 nil]
		aMorph: 	a ToggleMenuItemMorph(564920320)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(285@583) mouseUp 5094165 nil]
		aMorph: 	a ToggleMenuItemMorph(564920320)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(564920320)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(285@583) mouseUp 5094165 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(244.0@568.0) corner: (387.0@586.0)
		owner: 	a MenuMorph(254279680)
		submorphs: 	#()
		fullBounds: 	(244.0@568.0) corner: (387.0@586.0)
		color: 	Color black
		extension: 	a MorphExtension (575143936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(285@583) mouseUp 5094165 nil]
		aMorph: 	a MenuMorph(254279680)
		localEvt: 	[(285@583) mouseUp 5094165 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(564920320)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(564920320)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(285@583) mouseUp 5094165 nil]
		aMorph: 	a MenuMorph(254279680)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(254279680)
	Arguments and temporary variables: 
		anEvent: 	[(285@583) mouseUp 5094165 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(239.0@563.0) corner: (392.0@903.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(564920320)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(239.0@563.0) corner: (392.0@903.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (269221888) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(564920320)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(564920320)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(254279680)
	Arguments and temporary variables: 
		anEvent: 	[(285@583) mouseUp 5094165 nil]
	Receiver's instance variables: 
		bounds: 	(239.0@563.0) corner: (392.0@903.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(564920320)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(239.0@563.0) corner: (392.0@903.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (269221888) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(564920320)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(564920320)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(254279680)
	Arguments and temporary variables: 
		evt: 	[(285@583) mouseUp 5094165 nil]
	Receiver's instance variables: 
		bounds: 	(239.0@563.0) corner: (392.0@903.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(564920320)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(239.0@563.0) corner: (392.0@903.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (269221888) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(564920320)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(564920320)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(285@583) mouseUp 5094165 nil]
		focusHolder: 	a MenuMorph(254279680)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(288@583) corner: (304@599)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(288@583) corner: (304@599)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(288@583) mouseOver nil nil]
		targetOffset: 	(41.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5094219 287 583 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(149946368) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(285@583) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(149946368) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(285@583) mouseUp 5094165 nil]
		focusHolder: 	a MenuMorph(254279680)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(288@583) corner: (304@599)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(288@583) corner: (304@599)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(288@583) mouseOver nil nil]
		targetOffset: 	(41.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5094219 287 583 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(285@583) mouseUp 5094165 nil]
		focusHolder: 	a MenuMorph(254279680)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(288@583) corner: (304@599)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(288@583) corner: (304@599)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(288@583) mouseOver nil nil]
		targetOffset: 	(41.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5094219 287 583 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(285@583) mouseUp 5094165 nil]
	Receiver's instance variables: 
		bounds: 	(288@583) corner: (304@599)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(288@583) corner: (304@599)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(288@583) mouseOver nil nil]
		targetOffset: 	(41.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5094219 287 583 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
[:each | result := result + each getSolde] in Bank>>getSolde
OrderedCollection>>do:
Bank>>getSolde
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[editor mouseUp: evt] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "+" is nil
12 November 2013 11:35:18.736 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	+ 0
		exception: 	MessageNotUnderstood: receiver of "+" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[:each | result := result + each getSolde] in Bank>>getSolde
	Receiver: a Bank
	Arguments and temporary variables: 
		result: 	a Compte
		each: 	#(nil)
	Receiver's instance variables: 
		comptes: 	an OrderedCollection(a Compte a Compte)
		name: 	#BNP


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Compte a Compte)
	Arguments and temporary variables: 
		aBlock: 	[:each | result := result + each getSolde]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Compte a Compte nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Bank>>getSolde
	Receiver: a Bank
	Arguments and temporary variables: 
		result: 	#(nil)
	Receiver's instance variables: 
		comptes: 	an OrderedCollection(a Compte a Compte)
		name: 	#BNP


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(396361728)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	B := Bank new name: #BNP.
	B definirComptePour: #TOTO.
	B def...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(362807296)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(396361728)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(396361728)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(768081920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (478937088) [other:  (blinkStart -> 5169661) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'B := Bank new name: #BNP.
B definirComptePour: #TOTO.
B defin...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(608436224)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(608436224)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(149946368) a PluggableTextMorph(60...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(354942976)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(272@545) mouseUp 5170309 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(258.0@541.0) corner: (401.0@559.0)
		owner: 	a MenuMorph(772800512)
		submorphs: 	#()
		fullBounds: 	(258.0@541.0) corner: (401.0@559.0)
		color: 	Color black
		extension: 	a MorphExtension (365166592)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(354942976)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(272@545) mouseUp 5170309 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(258.0@541.0) corner: (401.0@559.0)
		owner: 	a MenuMorph(772800512)
		submorphs: 	#()
		fullBounds: 	(258.0@541.0) corner: (401.0@559.0)
		color: 	Color black
		extension: 	a MorphExtension (365166592)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(354942976)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(272@545) mouseUp 5170309 nil]
	Receiver's instance variables: 
		bounds: 	(258.0@541.0) corner: (401.0@559.0)
		owner: 	a MenuMorph(772800512)
		submorphs: 	#()
		fullBounds: 	(258.0@541.0) corner: (401.0@559.0)
		color: 	Color black
		extension: 	a MorphExtension (365166592)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(354942976)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(272@545) mouseUp 5170309 nil]
	Receiver's instance variables: 
		bounds: 	(258.0@541.0) corner: (401.0@559.0)
		owner: 	a MenuMorph(772800512)
		submorphs: 	#()
		fullBounds: 	(258.0@541.0) corner: (401.0@559.0)
		color: 	Color black
		extension: 	a MorphExtension (365166592)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(272@545) mouseUp 5170309 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(354942976)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5170309
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(272@545)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(354942976)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(272@545) mouseUp 5170309 nil]
	Receiver's instance variables: 
		bounds: 	(258.0@541.0) corner: (401.0@559.0)
		owner: 	a MenuMorph(772800512)
		submorphs: 	#()
		fullBounds: 	(258.0@541.0) corner: (401.0@559.0)
		color: 	Color black
		extension: 	a MorphExtension (365166592)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(272@545) mouseUp 5170309 nil]
		aMorph: 	a ToggleMenuItemMorph(354942976)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(272@545) mouseUp 5170309 nil]
		aMorph: 	a ToggleMenuItemMorph(354942976)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(354942976)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(272@545) mouseUp 5170309 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(258.0@541.0) corner: (401.0@559.0)
		owner: 	a MenuMorph(772800512)
		submorphs: 	#()
		fullBounds: 	(258.0@541.0) corner: (401.0@559.0)
		color: 	Color black
		extension: 	a MorphExtension (365166592)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(272@545) mouseUp 5170309 nil]
		aMorph: 	a MenuMorph(772800512)
		localEvt: 	[(272@545) mouseUp 5170309 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(354942976)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(354942976)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(272@545) mouseUp 5170309 nil]
		aMorph: 	a MenuMorph(772800512)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(772800512)
	Arguments and temporary variables: 
		anEvent: 	[(272@545) mouseUp 5170309 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(253.0@536.0) corner: (406.0@876.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(354942976)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(253.0@536.0) corner: (406.0@876.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (787742720) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(354942976)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(354942976)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(772800512)
	Arguments and temporary variables: 
		anEvent: 	[(272@545) mouseUp 5170309 nil]
	Receiver's instance variables: 
		bounds: 	(253.0@536.0) corner: (406.0@876.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(354942976)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(253.0@536.0) corner: (406.0@876.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (787742720) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(354942976)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(354942976)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(772800512)
	Arguments and temporary variables: 
		evt: 	[(272@545) mouseUp 5170309 nil]
	Receiver's instance variables: 
		bounds: 	(253.0@536.0) corner: (406.0@876.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(354942976)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(253.0@536.0) corner: (406.0@876.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (787742720) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(354942976)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(354942976)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(272@545) mouseUp 5170309 nil]
		focusHolder: 	a MenuMorph(772800512)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(272@545) corner: (288@561)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(272@545) corner: (288@561)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(272@545) mouseOver nil nil]
		targetOffset: 	(14.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5170309 272 545 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(149946368) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(272@545) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(149946368) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(272@545) mouseUp 5170309 nil]
		focusHolder: 	a MenuMorph(772800512)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(272@545) corner: (288@561)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(272@545) corner: (288@561)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(272@545) mouseOver nil nil]
		targetOffset: 	(14.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5170309 272 545 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(272@545) mouseUp 5170309 nil]
		focusHolder: 	a MenuMorph(772800512)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(272@545) corner: (288@561)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(272@545) corner: (288@561)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(272@545) mouseOver nil nil]
		targetOffset: 	(14.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5170309 272 545 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(272@545) mouseUp 5170309 nil]
	Receiver's instance variables: 
		bounds: 	(272@545) corner: (288@561)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(272@545) corner: (288@561)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(272@545) mouseOver nil nil]
		targetOffset: 	(14.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5170309 272 545 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
[:each | result := result + each getSolde] in Bank>>getSolde
OrderedCollection>>do:
Bank>>getSolde
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[editor mouseUp: evt] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "+" is nil
12 November 2013 11:35:57.924 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	+ 0
		exception: 	MessageNotUnderstood: receiver of "+" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[:each | result := result + each getSolde] in Bank>>getSolde
	Receiver: a Bank
	Arguments and temporary variables: 
		result: 	a Compte
		each: 	#(nil)
	Receiver's instance variables: 
		comptes: 	an OrderedCollection(a Compte a Compte)
		name: 	#BNP


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Compte a Compte)
	Arguments and temporary variables: 
		aBlock: 	[:each | result := result + each getSolde]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a Compte a Compte nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


Bank>>getSolde
	Receiver: a Bank
	Arguments and temporary variables: 
		result: 	#(nil)
	Receiver's instance variables: 
		comptes: 	an OrderedCollection(a Compte a Compte)
		name: 	#BNP


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(396361728)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	B := Bank new name: #BNP.
	B definirComptePour: #TOTO.
	B def...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(187957248)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(396361728)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(396361728)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(768081920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (478937088) [other:  (blinkStart -> 5209365) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'B := Bank new name: #BNP.
B definirComptePour: #TOTO.
B defin...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(608436224)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(608436224)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(149946368) a PluggableTextMorph(60...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(532938752)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(316@573) mouseUp 5209495 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(305.0@563.0) corner: (448.0@581.0)
		owner: 	a MenuMorph(550764544)
		submorphs: 	#()
		fullBounds: 	(305.0@563.0) corner: (448.0@581.0)
		color: 	Color black
		extension: 	a MorphExtension (543162368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(532938752)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(316@573) mouseUp 5209495 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(305.0@563.0) corner: (448.0@581.0)
		owner: 	a MenuMorph(550764544)
		submorphs: 	#()
		fullBounds: 	(305.0@563.0) corner: (448.0@581.0)
		color: 	Color black
		extension: 	a MorphExtension (543162368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(532938752)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(316@573) mouseUp 5209495 nil]
	Receiver's instance variables: 
		bounds: 	(305.0@563.0) corner: (448.0@581.0)
		owner: 	a MenuMorph(550764544)
		submorphs: 	#()
		fullBounds: 	(305.0@563.0) corner: (448.0@581.0)
		color: 	Color black
		extension: 	a MorphExtension (543162368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(532938752)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(316@573) mouseUp 5209495 nil]
	Receiver's instance variables: 
		bounds: 	(305.0@563.0) corner: (448.0@581.0)
		owner: 	a MenuMorph(550764544)
		submorphs: 	#()
		fullBounds: 	(305.0@563.0) corner: (448.0@581.0)
		color: 	Color black
		extension: 	a MorphExtension (543162368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(316@573) mouseUp 5209495 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(532938752)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5209495
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(316@573)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(532938752)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(316@573) mouseUp 5209495 nil]
	Receiver's instance variables: 
		bounds: 	(305.0@563.0) corner: (448.0@581.0)
		owner: 	a MenuMorph(550764544)
		submorphs: 	#()
		fullBounds: 	(305.0@563.0) corner: (448.0@581.0)
		color: 	Color black
		extension: 	a MorphExtension (543162368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(316@573) mouseUp 5209495 nil]
		aMorph: 	a ToggleMenuItemMorph(532938752)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(316@573) mouseUp 5209495 nil]
		aMorph: 	a ToggleMenuItemMorph(532938752)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(532938752)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(316@573) mouseUp 5209495 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(305.0@563.0) corner: (448.0@581.0)
		owner: 	a MenuMorph(550764544)
		submorphs: 	#()
		fullBounds: 	(305.0@563.0) corner: (448.0@581.0)
		color: 	Color black
		extension: 	a MorphExtension (543162368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(316@573) mouseUp 5209495 nil]
		aMorph: 	a MenuMorph(550764544)
		localEvt: 	[(316@573) mouseUp 5209495 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(532938752)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(532938752)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(316@573) mouseUp 5209495 nil]
		aMorph: 	a MenuMorph(550764544)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(550764544)
	Arguments and temporary variables: 
		anEvent: 	[(316@573) mouseUp 5209495 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(300.0@558.0) corner: (453.0@898.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(532938752)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(300.0@558.0) corner: (453.0@898.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (565706752) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(532938752)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(532938752)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(550764544)
	Arguments and temporary variables: 
		anEvent: 	[(316@573) mouseUp 5209495 nil]
	Receiver's instance variables: 
		bounds: 	(300.0@558.0) corner: (453.0@898.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(532938752)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(300.0@558.0) corner: (453.0@898.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (565706752) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(532938752)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(532938752)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(550764544)
	Arguments and temporary variables: 
		evt: 	[(316@573) mouseUp 5209495 nil]
	Receiver's instance variables: 
		bounds: 	(300.0@558.0) corner: (453.0@898.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(532938752)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(300.0@558.0) corner: (453.0@898.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (565706752) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(532938752)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(532938752)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(316@573) mouseUp 5209495 nil]
		focusHolder: 	a MenuMorph(550764544)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(316@573) corner: (332@589)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(316@573) corner: (332@589)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(316@573) mouseOver nil nil]
		targetOffset: 	(11.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5209495 316 573 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(149946368) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(316@573) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(149946368) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(316@573) mouseUp 5209495 nil]
		focusHolder: 	a MenuMorph(550764544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(316@573) corner: (332@589)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(316@573) corner: (332@589)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(316@573) mouseOver nil nil]
		targetOffset: 	(11.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5209495 316 573 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(316@573) mouseUp 5209495 nil]
		focusHolder: 	a MenuMorph(550764544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(316@573) corner: (332@589)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(316@573) corner: (332@589)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(316@573) mouseOver nil nil]
		targetOffset: 	(11.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5209495 316 573 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(316@573) mouseUp 5209495 nil]
	Receiver's instance variables: 
		bounds: 	(316@573) corner: (332@589)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(316@573) corner: (332@589)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(316@573) mouseOver nil nil]
		targetOffset: 	(11.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5209495 316 573 0 0 0 1)
		lastKeyScanCode: 	46
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
[:each | result := result + each getSolde] in Bank>>getSolde
OrderedCollection>>do:
Bank>>getSolde
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[editor mouseUp: evt] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>comptes
12 November 2013 11:37:13.804 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

SmallInteger(Object)>>doesNotUnderstand: #comptes
	Receiver: 0
	Arguments and temporary variables: 
		aMessage: 	comptes
		exception: 	MessageNotUnderstood: SmallInteger>>comptes
		resumeValue: 	nil
	Receiver's instance variables: 
0

Bank>>getSolde
	Receiver: a Bank
	Arguments and temporary variables: 
		result: 	#(nil)
	Receiver's instance variables: 
		comptes: 	an OrderedCollection(a Compte a Compte)
		name: 	#BNP


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(396361728)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	B := Bank new name: #BNP.
	B definirComptePour: #TOTO.
	B def...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(704905216)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(396361728)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(396361728)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(396361728)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(768081920)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (478937088) [other:  (blinkStart -> 5285377) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'B := Bank new name: #BNP.
B definirComptePour: #TOTO.
B defin...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(608436224)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(608436224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(162.0@508.0) corner: (602.0@675.0)
		owner: 	a SystemWindow(149946368)
		submorphs: 	an Array(a TransformMorph(768081920))
		fullBounds: 	(162@508) corner: (602@675)
		color: 	Color white
		extension: 	a MorphExtension (375128064) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(636223488)
		scroller: 	a TransformMorph(768081920)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(654311424)
		textMorph: 	a TextMorphForEditView(396361728)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 95)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(608436224)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(149946368) a PluggableTextMorph(60...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(396099584)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(295@571) mouseUp 5285365 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(274.0@563.0) corner: (417.0@581.0)
		owner: 	a MenuMorph(693895168)
		submorphs: 	#()
		fullBounds: 	(274.0@563.0) corner: (417.0@581.0)
		color: 	Color black
		extension: 	a MorphExtension (406323200)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(396099584)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(295@571) mouseUp 5285365 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(274.0@563.0) corner: (417.0@581.0)
		owner: 	a MenuMorph(693895168)
		submorphs: 	#()
		fullBounds: 	(274.0@563.0) corner: (417.0@581.0)
		color: 	Color black
		extension: 	a MorphExtension (406323200)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(396099584)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(295@571) mouseUp 5285365 nil]
	Receiver's instance variables: 
		bounds: 	(274.0@563.0) corner: (417.0@581.0)
		owner: 	a MenuMorph(693895168)
		submorphs: 	#()
		fullBounds: 	(274.0@563.0) corner: (417.0@581.0)
		color: 	Color black
		extension: 	a MorphExtension (406323200)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(396099584)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(295@571) mouseUp 5285365 nil]
	Receiver's instance variables: 
		bounds: 	(274.0@563.0) corner: (417.0@581.0)
		owner: 	a MenuMorph(693895168)
		submorphs: 	#()
		fullBounds: 	(274.0@563.0) corner: (417.0@581.0)
		color: 	Color black
		extension: 	a MorphExtension (406323200)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(295@571) mouseUp 5285365 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(396099584)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5285365
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(295@571)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(396099584)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(295@571) mouseUp 5285365 nil]
	Receiver's instance variables: 
		bounds: 	(274.0@563.0) corner: (417.0@581.0)
		owner: 	a MenuMorph(693895168)
		submorphs: 	#()
		fullBounds: 	(274.0@563.0) corner: (417.0@581.0)
		color: 	Color black
		extension: 	a MorphExtension (406323200)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@571) mouseUp 5285365 nil]
		aMorph: 	a ToggleMenuItemMorph(396099584)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@571) mouseUp 5285365 nil]
		aMorph: 	a ToggleMenuItemMorph(396099584)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(396099584)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(295@571) mouseUp 5285365 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(274.0@563.0) corner: (417.0@581.0)
		owner: 	a MenuMorph(693895168)
		submorphs: 	#()
		fullBounds: 	(274.0@563.0) corner: (417.0@581.0)
		color: 	Color black
		extension: 	a MorphExtension (406323200)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(608436224))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@571) mouseUp 5285365 nil]
		aMorph: 	a MenuMorph(693895168)
		localEvt: 	[(295@571) mouseUp 5285365 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(396099584)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(396099584)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(295@571) mouseUp 5285365 nil]
		aMorph: 	a MenuMorph(693895168)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(693895168)
	Arguments and temporary variables: 
		anEvent: 	[(295@571) mouseUp 5285365 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(269.0@558.0) corner: (422.0@898.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(396099584)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(269.0@558.0) corner: (422.0@898.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (708837376) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(396099584)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(396099584)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(693895168)
	Arguments and temporary variables: 
		anEvent: 	[(295@571) mouseUp 5285365 nil]
	Receiver's instance variables: 
		bounds: 	(269.0@558.0) corner: (422.0@898.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(396099584)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(269.0@558.0) corner: (422.0@898.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (708837376) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(396099584)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(396099584)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(693895168)
	Arguments and temporary variables: 
		evt: 	[(295@571) mouseUp 5285365 nil]
	Receiver's instance variables: 
		bounds: 	(269.0@558.0) corner: (422.0@898.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(396099584)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(269.0@558.0) corner: (422.0@898.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (708837376) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(396099584)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(396099584)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(295@571) mouseUp 5285365 nil]
		focusHolder: 	a MenuMorph(693895168)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(295@571) corner: (311@587)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(295@571) corner: (311@587)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(295@571) mouseOver nil nil]
		targetOffset: 	(21.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5285365 295 571 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(149946368) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(295@571) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(149946368) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(295@571) mouseUp 5285365 nil]
		focusHolder: 	a MenuMorph(693895168)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(295@571) corner: (311@587)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(295@571) corner: (311@587)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(295@571) mouseOver nil nil]
		targetOffset: 	(21.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5285365 295 571 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(295@571) mouseUp 5285365 nil]
		focusHolder: 	a MenuMorph(693895168)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(295@571) corner: (311@587)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(295@571) corner: (311@587)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(295@571) mouseOver nil nil]
		targetOffset: 	(21.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5285365 295 571 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(295@571) mouseUp 5285365 nil]
	Receiver's instance variables: 
		bounds: 	(295@571) corner: (311@587)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(295@571) corner: (311@587)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(295@571) mouseOver nil nil]
		targetOffset: 	(21.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5285365 295 571 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(295@571) mouseUp 5285365 nil]
		evt: 	[(295@571) mouseUp 5285365 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(295@571) corner: (311@587)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(295@571) corner: (311@587)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(295@571) mouseOver nil nil]
		targetOffset: 	(21.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5285365 295 571 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(295@571) mouseUp 5285365 nil]
		evtBuf: 	#(1 5285365 295 571 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(295@571) corner: (311@587)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(295@571) corner: (311@587)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(295@571) mouseOver nil nil]
		targetOffset: 	(21.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5285365 295 571 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #comptes
Bank>>getSolde
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[editor mouseUp: evt] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "isEmpty" is nil
12 November 2013 11:39:32.45 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #isEmpty
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	isEmpty
		exception: 	MessageNotUnderstood: receiver of "isEmpty" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Debugger>>selectedContext
	Receiver: a Debugger
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(296222720) a PluggableMultiColumnL...etc...
		contents: 	a Text for 'getSolde
	"comment stating purpose of message"
	|result|
...etc...
		currentCompiledMethod: 	(Bank>>#getSolde "a CompiledMethod(92536832)")
		contentsSymbol: 	#source
		interruptedProcess: 	nil
		interruptedController: 	nil
		contextStack: 	nil
		contextStackTop: 	nil
		contextStackIndex: 	1
		contextStackList: 	an OrderedCollection('Bank>>getSolde' 'UndefinedObject>>DoIt'...etc...
		receiverInspector: 	nil
		contextVariablesInspector: 	nil
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		savedCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
	...etc...
		errorWasInUIProcess: 	true
		labelString: 	nil


Debugger>>pcRange
	Receiver: a Debugger
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(296222720) a PluggableMultiColumnL...etc...
		contents: 	a Text for 'getSolde
	"comment stating purpose of message"
	|result|
...etc...
		currentCompiledMethod: 	(Bank>>#getSolde "a CompiledMethod(92536832)")
		contentsSymbol: 	#source
		interruptedProcess: 	nil
		interruptedController: 	nil
		contextStack: 	nil
		contextStackTop: 	nil
		contextStackIndex: 	1
		contextStackList: 	an OrderedCollection('Bank>>getSolde' 'UndefinedObject>>DoIt'...etc...
		receiverInspector: 	nil
		contextVariablesInspector: 	nil
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		savedCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
	...etc...
		errorWasInUIProcess: 	true
		labelString: 	nil


Debugger>>contentsSelection
	Receiver: a Debugger
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(296222720) a PluggableMultiColumnL...etc...
		contents: 	a Text for 'getSolde
	"comment stating purpose of message"
	|result|
...etc...
		currentCompiledMethod: 	(Bank>>#getSolde "a CompiledMethod(92536832)")
		contentsSymbol: 	#source
		interruptedProcess: 	nil
		interruptedController: 	nil
		contextStack: 	nil
		contextStackTop: 	nil
		contextStackIndex: 	1
		contextStackList: 	an OrderedCollection('Bank>>getSolde' 'UndefinedObject>>DoIt'...etc...
		receiverInspector: 	nil
		contextVariablesInspector: 	nil
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		savedCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
	...etc...
		errorWasInUIProcess: 	true
		labelString: 	nil


PluggableTextMorph>>getSelection
	Receiver: a PluggableTextMorph(555220992)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(394.0@619.0) corner: (1236.0@1000.0)
		owner: 	an AlignmentMorph(794034176)
		submorphs: 	an Array(a TransformMorph(821035008))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (472645632) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(583008256)
		scroller: 	a TransformMorph(821035008)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(707264512)
		textMorph: 	a TextMorphForEditView(493879296)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(71 to: 70)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>update:
	Receiver: a PluggableTextMorph(555220992)
	Arguments and temporary variables: 
		aSymbol: 	#contentsSelection
	Receiver's instance variables: 
		bounds: 	(394.0@619.0) corner: (1236.0@1000.0)
		owner: 	an AlignmentMorph(794034176)
		submorphs: 	an Array(a TransformMorph(821035008))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (472645632) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(583008256)
		scroller: 	a TransformMorph(821035008)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(707264512)
		textMorph: 	a TextMorphForEditView(493879296)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(71 to: 70)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:aDependent | aDependent update: aParameter] in Debugger(Object)>>changed:
	Receiver: a Debugger
	Arguments and temporary variables: 
		aParameter: 	a PluggableTextMorph(555220992)
		aDependent: 	#contentsSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(296222720) a PluggableMultiColumnL...etc...
		contents: 	a Text for 'getSolde
	"comment stating purpose of message"
	|result|
...etc...
		currentCompiledMethod: 	(Bank>>#getSolde "a CompiledMethod(92536832)")
		contentsSymbol: 	#source
		interruptedProcess: 	nil
		interruptedController: 	nil
		contextStack: 	nil
		contextStackTop: 	nil
		contextStackIndex: 	1
		contextStackList: 	an OrderedCollection('Bank>>getSolde' 'UndefinedObject>>DoIt'...etc...
		receiverInspector: 	nil
		contextVariablesInspector: 	nil
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		savedCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
	...etc...
		errorWasInUIProcess: 	true
		labelString: 	nil


DependentsArray>>do:
	Receiver: a DependentsArray(a SystemWindow(296222720) a PluggableMultiColumnListMorph(793509888) a P...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aDependent | aDependent update: aParameter]
		dep: 	a PluggableTextMorph(555220992)
		i: 	3
		iLimiT: 	12
	Receiver's instance variables: 
a DependentsArray(a SystemWindow(296222720) a PluggableMultiColumnListMorph(793509888) a P...etc...

Debugger(Object)>>changed:
	Receiver: a Debugger
	Arguments and temporary variables: 
		aParameter: 	#contentsSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(296222720) a PluggableMultiColumnL...etc...
		contents: 	a Text for 'getSolde
	"comment stating purpose of message"
	|result|
...etc...
		currentCompiledMethod: 	(Bank>>#getSolde "a CompiledMethod(92536832)")
		contentsSymbol: 	#source
		interruptedProcess: 	nil
		interruptedController: 	nil
		contextStack: 	nil
		contextStackTop: 	nil
		contextStackIndex: 	1
		contextStackList: 	an OrderedCollection('Bank>>getSolde' 'UndefinedObject>>DoIt'...etc...
		receiverInspector: 	nil
		contextVariablesInspector: 	nil
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		savedCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
	...etc...
		errorWasInUIProcess: 	true
		labelString: 	nil


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#changed: -> a Debugger)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a Debugger
		selector: 	#changed:
		arguments: 	#(#contentsSelection)
		scheduledTime: 	5424035
		numArgs: 	1


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#changed: -> a Debugger)
	Arguments and temporary variables: 
		anArgument: 	5424039
		nArgs: 	1
	Receiver's instance variables: 
		receiver: 	a Debugger
		selector: 	#changed:
		arguments: 	#(#contentsSelection)
		scheduledTime: 	5424035
		numArgs: 	1


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	5424039
		pending: 	a Heap()
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (1280@977)
		canvas: 	a FormCanvas on: DisplayScreen(1280x977x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(296222720))(a SystemWin...etc...
		lastStepTime: 	5424103
		lastStepMessage: 	nil
		lastCycleTime: 	5424103
		alarms: 	a Heap()
		lastAlarmTime: 	5424103
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
		now: 	5424039
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (1280@977)
		canvas: 	a FormCanvas on: DisplayScreen(1280x977x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(296222720))(a SystemWin...etc...
		lastStepTime: 	5424103
		lastStepMessage: 	nil
		lastCycleTime: 	5424103
		alarms: 	a Heap()
		lastAlarmTime: 	5424103
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
		queue: 	SharedQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (1280@977)
		canvas: 	a FormCanvas on: DisplayScreen(1280x977x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(296222720))(a SystemWin...etc...
		lastStepTime: 	5424103
		lastStepMessage: 	nil
		lastCycleTime: 	5424103
		alarms: 	a Heap()
		lastAlarmTime: 	5424103
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


PasteUpMorph>>runStepMethods
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(277348352) a Sy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (1280@977)
		canvas: 	a FormCanvas on: DisplayScreen(1280x977x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(296222720))(a SystemWin...etc...
		lastStepTime: 	5424103
		lastStepMessage: 	nil
		lastCycleTime: 	5424103
		alarms: 	a Heap()
		lastAlarmTime: 	5424103
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (1280@977)
		canvas: 	a FormCanvas on: DisplayScreen(1280x977x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(296222720))(a SystemWin...etc...
		lastStepTime: 	5424103
		lastStepMessage: 	nil
		lastCycleTime: 	5424103
		alarms: 	a Heap()
		lastAlarmTime: 	5424103
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(277348352) a Sy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #isEmpty
Debugger>>selectedContext
Debugger>>pcRange
Debugger>>contentsSelection
PluggableTextMorph>>getSelection
PluggableTextMorph>>update:
[:aDependent | aDependent update: aParameter] in Debugger(Object)>>changed:
DependentsArray>>do:
Debugger(Object)>>changed:
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
PasteUpMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid utf8 input detected
12 November 2013 11:54:49.076 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

UTF8TextConverter(Object)>>error:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aString: 	'Invalid utf8 input detected'
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/P...etc...
		character1: 	$©
		value1: 	169
		character2: 	$t
		value2: 	116
		unicode: 	nil
		character3: 	$i
		value3: 	105
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>peek
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		next: 	nil
		save: 	13005596
	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>back
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>backChunk
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		terminator: 	$!
		out: 	a WriteStream
		ch: 	$t
	Receiver's instance variables: 



WriteStream(PositionableStream)>>copyPreamble:from:at:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		preamble: 	'Compte methodsFor: ''métier'''
		aStream: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/P...etc...
		pos: 	13005649
		terminator: 	$!
		last50: 	nil
		stamp: 	nil
		i: 	nil
	Receiver's instance variables: 
		collection: 	'Object subclass: #Compte
	instanceVariableNames: ''proprio solde''...etc...
		position: 	323
		readLimit: 	0
		writeLimit: 	1000


Compte class(ClassDescription)>>printMethodChunk:withPreamble:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		selector: 	#deposer:
		doPreamble: 	true
		outStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		preamble: 	'Compte methodsFor: ''métier'''
		method: 	(Compte>>#deposer: "a CompiledMethod(493879296)")
		oldPos: 	13005649
		newPos: 	nil
		sourceFile: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltal...etc...
		endPos: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('métier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	#deposer:
		moveSource: 	a WriteStream
		fileIndex: 	false
		sel: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('métier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: #(#deposer: #getSolde #retrait:)
	Arguments and temporary variables: 
		aBlock: 	[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileSt...etc...
		index: 	1
		indexLimiT: 	3
	Receiver's instance variables: 
#(#deposer: #getSolde #retrait:)

Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aSymbol: 	#métier
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		selectors: 	#(#deposer: #getSolde #retrait:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('métier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	#métier
		moveSource: 	a WriteStream
		fileIndex: 	false
		heading: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('métier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: #(#'initialize-release' #métier)
	Arguments and temporary variables: 
		aBlock: 	[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSou...etc...
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
#(#'initialize-release' #métier)

Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('métier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Compte class(Class)>>fileOutOn:moveSource:toFile:initializing:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		aBool: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('métier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; nextPut: Character newPage; cr].
	each
		fileOutOn: aFileStream
		moveSource: false
		toFile: 0
		initializing: false] in SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


Array(SequenceableCollection)>>do:
	Receiver: {Compte. Bank}
	Arguments and temporary variables: 
		aBlock: 	[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; ...etc...
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
{Compte. Bank}

SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


SystemOrganizer>>fileOutCategory:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
		category: 	#METAPROG
		internalStream: 	a WriteStream
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


OBClassCategoryNode>>fileOut
	Receiver: OBClassCategoryNode<METAPROG>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	ClassCategory
#classes->Class
#comments->ClassComment
#metaclasses->M...etc...
		environment: 	Smalltalk
		name: 	#METAPROG


OBCmdFileOut>>execute
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassCategoryNode<METAPROG>
		requestor: 	an OBColumn(METAPROG)


OBCmdFileOut(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(357826560)
	Receiver's instance variables: 
		target: 	OBClassCategoryNode<METAPROG>
		requestor: 	an OBColumn(METAPROG)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(221511680)'File out'
	Arguments and temporary variables: 
		evt: 	[(466@210) mouseUp 6340639 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(399.0@206.0) corner: (601.0@220.0)
		owner: 	a MenuMorph(742916096)
		submorphs: 	#()
		fullBounds: 	(399.0@206.0) corner: (601.0@220.0)
		color: 	Color black
		extension: 	a MorphExtension (231735296)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(221511680)'File out'
	Arguments and temporary variables: 
		evt: 	[(466@210) mouseUp 6340639 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(399.0@206.0) corner: (601.0@220.0)
		owner: 	a MenuMorph(742916096)
		submorphs: 	#()
		fullBounds: 	(399.0@206.0) corner: (601.0@220.0)
		color: 	Color black
		extension: 	a MorphExtension (231735296)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(221511680)'File out'
	Arguments and temporary variables: 
		evt: 	[(466@210) mouseUp 6340639 nil]
	Receiver's instance variables: 
		bounds: 	(399.0@206.0) corner: (601.0@220.0)
		owner: 	a MenuMorph(742916096)
		submorphs: 	#()
		fullBounds: 	(399.0@206.0) corner: (601.0@220.0)
		color: 	Color black
		extension: 	a MorphExtension (231735296)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(221511680)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(466@210) mouseUp 6340639 nil]
	Receiver's instance variables: 
		bounds: 	(399.0@206.0) corner: (601.0@220.0)
		owner: 	a MenuMorph(742916096)
		submorphs: 	#()
		fullBounds: 	(399.0@206.0) corner: (601.0@220.0)
		color: 	Color black
		extension: 	a MorphExtension (231735296)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MouseButtonEvent>>sentTo:
	Receiver: [(466@210) mouseUp 6340639 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(221511680)'File out'
	Receiver's instance variables: 
		timeStamp: 	6340639
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(466@210)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(221511680)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(466@210) mouseUp 6340639 nil]
	Receiver's instance variables: 
		bounds: 	(399.0@206.0) corner: (601.0@220.0)
		owner: 	a MenuMorph(742916096)
		submorphs: 	#()
		fullBounds: 	(399.0@206.0) corner: (601.0@220.0)
		color: 	Color black
		extension: 	a MorphExtension (231735296)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(466@210) mouseUp 6340639 nil]
		aMorph: 	a ToggleMenuItemMorph(221511680)'File out'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(466@210) mouseUp 6340639 nil]
		aMorph: 	a ToggleMenuItemMorph(221511680)'File out'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(221511680)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(466@210) mouseUp 6340639 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(399.0@206.0) corner: (601.0@220.0)
		owner: 	a MenuMorph(742916096)
		submorphs: 	#()
		fullBounds: 	(399.0@206.0) corner: (601.0@220.0)
		color: 	Color black
		extension: 	a MorphExtension (231735296)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(466@210) mouseUp 6340639 nil]
		aMorph: 	a MenuMorph(742916096)
		localEvt: 	[(466@210) mouseUp 6340639 nil]
		index: 	9
		child: 	a ToggleMenuItemMorph(221511680)'File out'
		morphs: 	an Array(a ToggleMenuItemMorph(509345792)'Add category...' a ToggleMenu...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(466@210) mouseUp 6340639 nil]
		aMorph: 	a MenuMorph(742916096)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(742916096)
	Arguments and temporary variables: 
		anEvent: 	[(466@210) mouseUp 6340639 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(394.0@97.0) corner: (606.0@310.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(509345792)'Add category...' a ToggleM...etc...
		fullBounds: 	(394.0@97.0) corner: (606.0@310.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (757858304) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(221511680)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(509345792)'Add category.....etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(742916096)
	Arguments and temporary variables: 
		anEvent: 	[(466@210) mouseUp 6340639 nil]
	Receiver's instance variables: 
		bounds: 	(394.0@97.0) corner: (606.0@310.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(509345792)'Add category...' a ToggleM...etc...
		fullBounds: 	(394.0@97.0) corner: (606.0@310.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (757858304) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(221511680)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(509345792)'Add category.....etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(742916096)
	Arguments and temporary variables: 
		evt: 	[(466@210) mouseUp 6340639 nil]
	Receiver's instance variables: 
		bounds: 	(394.0@97.0) corner: (606.0@310.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(509345792)'Add category...' a ToggleM...etc...
		fullBounds: 	(394.0@97.0) corner: (606.0@310.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (757858304) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(221511680)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(509345792)'Add category.....etc...



--- The full stack ---
UTF8TextConverter(Object)>>error:
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
MultiByteFileStream>>peek
MultiByteFileStream(PositionableStream)>>back
MultiByteFileStream(PositionableStream)>>backChunk
WriteStream(PositionableStream)>>copyPreamble:from:at:
Compte class(ClassDescription)>>printMethodChunk:withPreamble:on:moveSource:toFile:
[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
Array(SequenceableCollection)>>do:
Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
Array(SequenceableCollection)>>do:
Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
Compte class(Class)>>fileOutOn:moveSource:toFile:initializing:
[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; nextPut: Character newPage; cr].
	each
		fileOutOn: aFileStream
		moveSource: false
		toFile: 0
		initializing: false] in SystemOrganizer>>fileOutCategory:on:initializing:
Array(SequenceableCollection)>>do:
SystemOrganizer>>fileOutCategory:on:initializing:
SystemOrganizer>>fileOutCategory:
OBClassCategoryNode>>fileOut
OBCmdFileOut>>execute
OBCmdFileOut(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid utf8 input detected
12 November 2013 11:56:17.998 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

UTF8TextConverter(Object)>>error:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aString: 	'Invalid utf8 input detected'
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/P...etc...
		character1: 	$©
		value1: 	169
		character2: 	$t
		value2: 	116
		unicode: 	nil
		character3: 	$i
		value3: 	105
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>peek
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		next: 	nil
		save: 	13005596
	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>back
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>backChunk
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		terminator: 	$!
		out: 	a WriteStream
		ch: 	$t
	Receiver's instance variables: 



WriteStream(PositionableStream)>>copyPreamble:from:at:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		preamble: 	'Compte methodsFor: ''metier'''
		aStream: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/P...etc...
		pos: 	13005649
		terminator: 	$!
		last50: 	nil
		stamp: 	nil
		i: 	nil
	Receiver's instance variables: 
		collection: 	'Object subclass: #Compte
	instanceVariableNames: ''proprio solde''...etc...
		position: 	323
		readLimit: 	0
		writeLimit: 	1000


Compte class(ClassDescription)>>printMethodChunk:withPreamble:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		selector: 	#deposer:
		doPreamble: 	true
		outStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		preamble: 	'Compte methodsFor: ''metier'''
		method: 	(Compte>>#deposer: "a CompiledMethod(493879296)")
		oldPos: 	13005649
		newPos: 	nil
		sourceFile: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltal...etc...
		endPos: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	#deposer:
		moveSource: 	a WriteStream
		fileIndex: 	false
		sel: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: #(#deposer: #getSolde #retrait:)
	Arguments and temporary variables: 
		aBlock: 	[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileSt...etc...
		index: 	1
		indexLimiT: 	3
	Receiver's instance variables: 
#(#deposer: #getSolde #retrait:)

Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aSymbol: 	#metier
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		selectors: 	#(#deposer: #getSolde #retrait:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	#metier
		moveSource: 	a WriteStream
		fileIndex: 	false
		heading: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: #(#'initialize-release' #metier)
	Arguments and temporary variables: 
		aBlock: 	[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSou...etc...
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
#(#'initialize-release' #metier)

Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Compte class(Class)>>fileOutOn:moveSource:toFile:initializing:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		aBool: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; nextPut: Character newPage; cr].
	each
		fileOutOn: aFileStream
		moveSource: false
		toFile: 0
		initializing: false] in SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


Array(SequenceableCollection)>>do:
	Receiver: {Compte. Bank}
	Arguments and temporary variables: 
		aBlock: 	[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; ...etc...
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
{Compte. Bank}

SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


SystemOrganizer>>fileOutCategory:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
		category: 	#METAPROG
		internalStream: 	a WriteStream
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


OBClassCategoryNode>>fileOut
	Receiver: OBClassCategoryNode<METAPROG>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	ClassCategory
#classes->Class
#comments->ClassComment
#metaclasses->M...etc...
		environment: 	Smalltalk
		name: 	#METAPROG


OBCmdFileOut>>execute
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassCategoryNode<METAPROG>
		requestor: 	an OBColumn(METAPROG)


OBCmdFileOut(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(357826560)
	Receiver's instance variables: 
		target: 	OBClassCategoryNode<METAPROG>
		requestor: 	an OBColumn(METAPROG)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(312475648)'File out'
	Arguments and temporary variables: 
		evt: 	[(445@212) mouseUp 6429567 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(415.0@210.0) corner: (617.0@224.0)
		owner: 	a MenuMorph(833880064)
		submorphs: 	#()
		fullBounds: 	(415.0@210.0) corner: (617.0@224.0)
		color: 	Color black
		extension: 	a MorphExtension (322699264)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(312475648)'File out'
	Arguments and temporary variables: 
		evt: 	[(445@212) mouseUp 6429567 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(415.0@210.0) corner: (617.0@224.0)
		owner: 	a MenuMorph(833880064)
		submorphs: 	#()
		fullBounds: 	(415.0@210.0) corner: (617.0@224.0)
		color: 	Color black
		extension: 	a MorphExtension (322699264)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(312475648)'File out'
	Arguments and temporary variables: 
		evt: 	[(445@212) mouseUp 6429567 nil]
	Receiver's instance variables: 
		bounds: 	(415.0@210.0) corner: (617.0@224.0)
		owner: 	a MenuMorph(833880064)
		submorphs: 	#()
		fullBounds: 	(415.0@210.0) corner: (617.0@224.0)
		color: 	Color black
		extension: 	a MorphExtension (322699264)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(312475648)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(445@212) mouseUp 6429567 nil]
	Receiver's instance variables: 
		bounds: 	(415.0@210.0) corner: (617.0@224.0)
		owner: 	a MenuMorph(833880064)
		submorphs: 	#()
		fullBounds: 	(415.0@210.0) corner: (617.0@224.0)
		color: 	Color black
		extension: 	a MorphExtension (322699264)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MouseButtonEvent>>sentTo:
	Receiver: [(445@212) mouseUp 6429567 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(312475648)'File out'
	Receiver's instance variables: 
		timeStamp: 	6429567
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(445@212)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(312475648)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(445@212) mouseUp 6429567 nil]
	Receiver's instance variables: 
		bounds: 	(415.0@210.0) corner: (617.0@224.0)
		owner: 	a MenuMorph(833880064)
		submorphs: 	#()
		fullBounds: 	(415.0@210.0) corner: (617.0@224.0)
		color: 	Color black
		extension: 	a MorphExtension (322699264)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(445@212) mouseUp 6429567 nil]
		aMorph: 	a ToggleMenuItemMorph(312475648)'File out'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(445@212) mouseUp 6429567 nil]
		aMorph: 	a ToggleMenuItemMorph(312475648)'File out'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(312475648)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(445@212) mouseUp 6429567 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(415.0@210.0) corner: (617.0@224.0)
		owner: 	a MenuMorph(833880064)
		submorphs: 	#()
		fullBounds: 	(415.0@210.0) corner: (617.0@224.0)
		color: 	Color black
		extension: 	a MorphExtension (322699264)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(445@212) mouseUp 6429567 nil]
		aMorph: 	a MenuMorph(833880064)
		localEvt: 	[(445@212) mouseUp 6429567 nil]
		index: 	9
		child: 	a ToggleMenuItemMorph(312475648)'File out'
		morphs: 	an Array(a ToggleMenuItemMorph(600309760)'Add category...' a ToggleMenu...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(445@212) mouseUp 6429567 nil]
		aMorph: 	a MenuMorph(833880064)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(833880064)
	Arguments and temporary variables: 
		anEvent: 	[(445@212) mouseUp 6429567 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(410.0@101.0) corner: (622.0@314.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(600309760)'Add category...' a ToggleM...etc...
		fullBounds: 	(410.0@101.0) corner: (622.0@314.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (848822272) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(312475648)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(600309760)'Add category.....etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(833880064)
	Arguments and temporary variables: 
		anEvent: 	[(445@212) mouseUp 6429567 nil]
	Receiver's instance variables: 
		bounds: 	(410.0@101.0) corner: (622.0@314.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(600309760)'Add category...' a ToggleM...etc...
		fullBounds: 	(410.0@101.0) corner: (622.0@314.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (848822272) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(312475648)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(600309760)'Add category.....etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(833880064)
	Arguments and temporary variables: 
		evt: 	[(445@212) mouseUp 6429567 nil]
	Receiver's instance variables: 
		bounds: 	(410.0@101.0) corner: (622.0@314.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(600309760)'Add category...' a ToggleM...etc...
		fullBounds: 	(410.0@101.0) corner: (622.0@314.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (848822272) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(312475648)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(600309760)'Add category.....etc...



--- The full stack ---
UTF8TextConverter(Object)>>error:
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
MultiByteFileStream>>peek
MultiByteFileStream(PositionableStream)>>back
MultiByteFileStream(PositionableStream)>>backChunk
WriteStream(PositionableStream)>>copyPreamble:from:at:
Compte class(ClassDescription)>>printMethodChunk:withPreamble:on:moveSource:toFile:
[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
Array(SequenceableCollection)>>do:
Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
Array(SequenceableCollection)>>do:
Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
Compte class(Class)>>fileOutOn:moveSource:toFile:initializing:
[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; nextPut: Character newPage; cr].
	each
		fileOutOn: aFileStream
		moveSource: false
		toFile: 0
		initializing: false] in SystemOrganizer>>fileOutCategory:on:initializing:
Array(SequenceableCollection)>>do:
SystemOrganizer>>fileOutCategory:on:initializing:
SystemOrganizer>>fileOutCategory:
OBClassCategoryNode>>fileOut
OBCmdFileOut>>execute
OBCmdFileOut(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid utf8 input detected
12 November 2013 11:58:04.536 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

UTF8TextConverter(Object)>>error:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aString: 	'Invalid utf8 input detected'
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/P...etc...
		character1: 	$©
		value1: 	169
		character2: 	$t
		value2: 	116
		unicode: 	nil
		character3: 	$i
		value3: 	105
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>peek
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		next: 	nil
		save: 	13005596
	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>back
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>backChunk
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		terminator: 	$!
		out: 	a WriteStream
		ch: 	$t
	Receiver's instance variables: 



WriteStream(PositionableStream)>>copyPreamble:from:at:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		preamble: 	'Compte methodsFor: ''metier'''
		aStream: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/P...etc...
		pos: 	13005649
		terminator: 	$!
		last50: 	nil
		stamp: 	nil
		i: 	nil
	Receiver's instance variables: 
		collection: 	'Object subclass: #Compte
	instanceVariableNames: ''proprio solde''...etc...
		position: 	323
		readLimit: 	0
		writeLimit: 	1000


Compte class(ClassDescription)>>printMethodChunk:withPreamble:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		selector: 	#deposer:
		doPreamble: 	true
		outStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		preamble: 	'Compte methodsFor: ''metier'''
		method: 	(Compte>>#deposer: "a CompiledMethod(493879296)")
		oldPos: 	13005649
		newPos: 	nil
		sourceFile: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltal...etc...
		endPos: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	#deposer:
		moveSource: 	a WriteStream
		fileIndex: 	false
		sel: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: #(#deposer: #getSolde #retrait:)
	Arguments and temporary variables: 
		aBlock: 	[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileSt...etc...
		index: 	1
		indexLimiT: 	3
	Receiver's instance variables: 
#(#deposer: #getSolde #retrait:)

Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aSymbol: 	#metier
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		selectors: 	#(#deposer: #getSolde #retrait:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	#metier
		moveSource: 	a WriteStream
		fileIndex: 	false
		heading: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: #(#'initialize-release' #metier)
	Arguments and temporary variables: 
		aBlock: 	[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSou...etc...
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
#(#'initialize-release' #metier)

Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Compte class(Class)>>fileOutOn:moveSource:toFile:initializing:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		aBool: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; nextPut: Character newPage; cr].
	each
		fileOutOn: aFileStream
		moveSource: false
		toFile: 0
		initializing: false] in SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


Array(SequenceableCollection)>>do:
	Receiver: {Compte. Bank}
	Arguments and temporary variables: 
		aBlock: 	[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; ...etc...
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
{Compte. Bank}

SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


SystemOrganizer>>fileOutCategory:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
		category: 	#METAPROG
		internalStream: 	a WriteStream
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


OBClassCategoryNode>>fileOut
	Receiver: OBClassCategoryNode<METAPROG>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	ClassCategory
#classes->Class
#comments->ClassComment
#metaclasses->M...etc...
		environment: 	Smalltalk
		name: 	#METAPROG


OBCmdFileOut>>execute
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassCategoryNode<METAPROG>
		requestor: 	an OBColumn(METAPROG)


OBCmdFileOut(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(357826560)
	Receiver's instance variables: 
		target: 	OBClassCategoryNode<METAPROG>
		requestor: 	an OBColumn(METAPROG)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(896270336)'File out'
	Arguments and temporary variables: 
		evt: 	[(465@216) mouseUp 6536095 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(382.0@204.0) corner: (584.0@218.0)
		owner: 	a MenuMorph(725614592)
		submorphs: 	#()
		fullBounds: 	(382.0@204.0) corner: (584.0@218.0)
		color: 	Color black
		extension: 	a MorphExtension (906493952)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(896270336)'File out'
	Arguments and temporary variables: 
		evt: 	[(465@216) mouseUp 6536095 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(382.0@204.0) corner: (584.0@218.0)
		owner: 	a MenuMorph(725614592)
		submorphs: 	#()
		fullBounds: 	(382.0@204.0) corner: (584.0@218.0)
		color: 	Color black
		extension: 	a MorphExtension (906493952)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(896270336)'File out'
	Arguments and temporary variables: 
		evt: 	[(465@216) mouseUp 6536095 nil]
	Receiver's instance variables: 
		bounds: 	(382.0@204.0) corner: (584.0@218.0)
		owner: 	a MenuMorph(725614592)
		submorphs: 	#()
		fullBounds: 	(382.0@204.0) corner: (584.0@218.0)
		color: 	Color black
		extension: 	a MorphExtension (906493952)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(896270336)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(465@216) mouseUp 6536095 nil]
	Receiver's instance variables: 
		bounds: 	(382.0@204.0) corner: (584.0@218.0)
		owner: 	a MenuMorph(725614592)
		submorphs: 	#()
		fullBounds: 	(382.0@204.0) corner: (584.0@218.0)
		color: 	Color black
		extension: 	a MorphExtension (906493952)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MouseButtonEvent>>sentTo:
	Receiver: [(465@216) mouseUp 6536095 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(896270336)'File out'
	Receiver's instance variables: 
		timeStamp: 	6536095
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(465@216)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(896270336)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(465@216) mouseUp 6536095 nil]
	Receiver's instance variables: 
		bounds: 	(382.0@204.0) corner: (584.0@218.0)
		owner: 	a MenuMorph(725614592)
		submorphs: 	#()
		fullBounds: 	(382.0@204.0) corner: (584.0@218.0)
		color: 	Color black
		extension: 	a MorphExtension (906493952)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(465@216) mouseUp 6536095 nil]
		aMorph: 	a ToggleMenuItemMorph(896270336)'File out'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(465@216) mouseUp 6536095 nil]
		aMorph: 	a ToggleMenuItemMorph(896270336)'File out'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(896270336)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(465@216) mouseUp 6536095 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(382.0@204.0) corner: (584.0@218.0)
		owner: 	a MenuMorph(725614592)
		submorphs: 	#()
		fullBounds: 	(382.0@204.0) corner: (584.0@218.0)
		color: 	Color black
		extension: 	a MorphExtension (906493952)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(465@216) mouseUp 6536095 nil]
		aMorph: 	a MenuMorph(725614592)
		localEvt: 	[(465@216) mouseUp 6536095 nil]
		index: 	9
		child: 	a ToggleMenuItemMorph(896270336)'File out'
		morphs: 	an Array(a ToggleMenuItemMorph(110362624)'Add category...' a ToggleMenu...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(465@216) mouseUp 6536095 nil]
		aMorph: 	a MenuMorph(725614592)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(725614592)
	Arguments and temporary variables: 
		anEvent: 	[(465@216) mouseUp 6536095 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(377.0@95.0) corner: (589.0@353.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(110362624)'Add category...' a ToggleM...etc...
		fullBounds: 	(377.0@95.0) corner: (589.0@353.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (740556800) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(896270336)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(110362624)'Add category.....etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(725614592)
	Arguments and temporary variables: 
		anEvent: 	[(465@216) mouseUp 6536095 nil]
	Receiver's instance variables: 
		bounds: 	(377.0@95.0) corner: (589.0@353.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(110362624)'Add category...' a ToggleM...etc...
		fullBounds: 	(377.0@95.0) corner: (589.0@353.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (740556800) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(896270336)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(110362624)'Add category.....etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(725614592)
	Arguments and temporary variables: 
		evt: 	[(465@216) mouseUp 6536095 nil]
	Receiver's instance variables: 
		bounds: 	(377.0@95.0) corner: (589.0@353.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(110362624)'Add category...' a ToggleM...etc...
		fullBounds: 	(377.0@95.0) corner: (589.0@353.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (740556800) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(896270336)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(110362624)'Add category.....etc...



--- The full stack ---
UTF8TextConverter(Object)>>error:
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
MultiByteFileStream>>peek
MultiByteFileStream(PositionableStream)>>back
MultiByteFileStream(PositionableStream)>>backChunk
WriteStream(PositionableStream)>>copyPreamble:from:at:
Compte class(ClassDescription)>>printMethodChunk:withPreamble:on:moveSource:toFile:
[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
Array(SequenceableCollection)>>do:
Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
Array(SequenceableCollection)>>do:
Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
Compte class(Class)>>fileOutOn:moveSource:toFile:initializing:
[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; nextPut: Character newPage; cr].
	each
		fileOutOn: aFileStream
		moveSource: false
		toFile: 0
		initializing: false] in SystemOrganizer>>fileOutCategory:on:initializing:
Array(SequenceableCollection)>>do:
SystemOrganizer>>fileOutCategory:on:initializing:
SystemOrganizer>>fileOutCategory:
OBClassCategoryNode>>fileOut
OBCmdFileOut>>execute
OBCmdFileOut(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid utf8 input detected
12 November 2013 11:59:03.166 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

UTF8TextConverter(Object)>>error:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aString: 	'Invalid utf8 input detected'
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/P...etc...
		character1: 	$©
		value1: 	169
		character2: 	$t
		value2: 	116
		unicode: 	nil
		character3: 	$i
		value3: 	105
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>peek
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		next: 	nil
		save: 	13005596
	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>back
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>backChunk
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		terminator: 	$!
		out: 	a WriteStream
		ch: 	$t
	Receiver's instance variables: 



WriteStream(PositionableStream)>>copyPreamble:from:at:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		preamble: 	'Compte methodsFor: ''metier'''
		aStream: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/P...etc...
		pos: 	13005649
		terminator: 	$!
		last50: 	nil
		stamp: 	nil
		i: 	nil
	Receiver's instance variables: 
		collection: 	'Object subclass: #Compte
	instanceVariableNames: ''proprio solde''...etc...
		position: 	323
		readLimit: 	0
		writeLimit: 	1000


Compte class(ClassDescription)>>printMethodChunk:withPreamble:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		selector: 	#deposer:
		doPreamble: 	true
		outStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		preamble: 	'Compte methodsFor: ''metier'''
		method: 	(Compte>>#deposer: "a CompiledMethod(493879296)")
		oldPos: 	13005649
		newPos: 	nil
		sourceFile: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltal...etc...
		endPos: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	#deposer:
		moveSource: 	a WriteStream
		fileIndex: 	false
		sel: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: #(#deposer: #getSolde #retrait:)
	Arguments and temporary variables: 
		aBlock: 	[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileSt...etc...
		index: 	1
		indexLimiT: 	3
	Receiver's instance variables: 
#(#deposer: #getSolde #retrait:)

Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aSymbol: 	#metier
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		selectors: 	#(#deposer: #getSolde #retrait:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	#metier
		moveSource: 	a WriteStream
		fileIndex: 	false
		heading: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: #(#'initialize-release' #metier)
	Arguments and temporary variables: 
		aBlock: 	[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSou...etc...
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
#(#'initialize-release' #metier)

Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Compte class(Class)>>fileOutOn:moveSource:toFile:initializing:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		aBool: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; nextPut: Character newPage; cr].
	each
		fileOutOn: aFileStream
		moveSource: false
		toFile: 0
		initializing: false] in SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


Array(SequenceableCollection)>>do:
	Receiver: {Compte. Bank}
	Arguments and temporary variables: 
		aBlock: 	[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; ...etc...
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
{Compte. Bank}

SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


SystemOrganizer>>fileOutCategory:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
		category: 	#METAPROG
		internalStream: 	a WriteStream
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


OBClassCategoryNode>>fileOut
	Receiver: OBClassCategoryNode<METAPROG>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	ClassCategory
#classes->Class
#comments->ClassComment
#metaclasses->M...etc...
		environment: 	Smalltalk
		name: 	#METAPROG


OBCmdFileOut>>execute
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassCategoryNode<METAPROG>
		requestor: 	an OBColumn(METAPROG)


OBCmdFileOut(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(357826560)
	Receiver's instance variables: 
		target: 	OBClassCategoryNode<METAPROG>
		requestor: 	an OBColumn(METAPROG)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(264765440)'File out'
	Arguments and temporary variables: 
		evt: 	[(426@204) mouseUp 6594727 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(375.0@201.0) corner: (577.0@215.0)
		owner: 	a MenuMorph(979632128)
		submorphs: 	#()
		fullBounds: 	(375.0@201.0) corner: (577.0@215.0)
		color: 	Color black
		extension: 	a MorphExtension (274989056)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(264765440)'File out'
	Arguments and temporary variables: 
		evt: 	[(426@204) mouseUp 6594727 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(375.0@201.0) corner: (577.0@215.0)
		owner: 	a MenuMorph(979632128)
		submorphs: 	#()
		fullBounds: 	(375.0@201.0) corner: (577.0@215.0)
		color: 	Color black
		extension: 	a MorphExtension (274989056)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(264765440)'File out'
	Arguments and temporary variables: 
		evt: 	[(426@204) mouseUp 6594727 nil]
	Receiver's instance variables: 
		bounds: 	(375.0@201.0) corner: (577.0@215.0)
		owner: 	a MenuMorph(979632128)
		submorphs: 	#()
		fullBounds: 	(375.0@201.0) corner: (577.0@215.0)
		color: 	Color black
		extension: 	a MorphExtension (274989056)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(264765440)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(426@204) mouseUp 6594727 nil]
	Receiver's instance variables: 
		bounds: 	(375.0@201.0) corner: (577.0@215.0)
		owner: 	a MenuMorph(979632128)
		submorphs: 	#()
		fullBounds: 	(375.0@201.0) corner: (577.0@215.0)
		color: 	Color black
		extension: 	a MorphExtension (274989056)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MouseButtonEvent>>sentTo:
	Receiver: [(426@204) mouseUp 6594727 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(264765440)'File out'
	Receiver's instance variables: 
		timeStamp: 	6594727
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(426@204)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(264765440)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(426@204) mouseUp 6594727 nil]
	Receiver's instance variables: 
		bounds: 	(375.0@201.0) corner: (577.0@215.0)
		owner: 	a MenuMorph(979632128)
		submorphs: 	#()
		fullBounds: 	(375.0@201.0) corner: (577.0@215.0)
		color: 	Color black
		extension: 	a MorphExtension (274989056)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(426@204) mouseUp 6594727 nil]
		aMorph: 	a ToggleMenuItemMorph(264765440)'File out'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(426@204) mouseUp 6594727 nil]
		aMorph: 	a ToggleMenuItemMorph(264765440)'File out'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(264765440)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(426@204) mouseUp 6594727 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(375.0@201.0) corner: (577.0@215.0)
		owner: 	a MenuMorph(979632128)
		submorphs: 	#()
		fullBounds: 	(375.0@201.0) corner: (577.0@215.0)
		color: 	Color black
		extension: 	a MorphExtension (274989056)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(426@204) mouseUp 6594727 nil]
		aMorph: 	a MenuMorph(979632128)
		localEvt: 	[(426@204) mouseUp 6594727 nil]
		index: 	9
		child: 	a ToggleMenuItemMorph(264765440)'File out'
		morphs: 	an Array(a ToggleMenuItemMorph(558628864)'Add category...' a ToggleMenu...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(426@204) mouseUp 6594727 nil]
		aMorph: 	a MenuMorph(979632128)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(979632128)
	Arguments and temporary variables: 
		anEvent: 	[(426@204) mouseUp 6594727 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(370.0@92.0) corner: (582.0@365.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(558628864)'Add category...' a ToggleM...etc...
		fullBounds: 	(370.0@92.0) corner: (582.0@365.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (994574336) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(264765440)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(558628864)'Add category.....etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(979632128)
	Arguments and temporary variables: 
		anEvent: 	[(426@204) mouseUp 6594727 nil]
	Receiver's instance variables: 
		bounds: 	(370.0@92.0) corner: (582.0@365.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(558628864)'Add category...' a ToggleM...etc...
		fullBounds: 	(370.0@92.0) corner: (582.0@365.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (994574336) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(264765440)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(558628864)'Add category.....etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(979632128)
	Arguments and temporary variables: 
		evt: 	[(426@204) mouseUp 6594727 nil]
	Receiver's instance variables: 
		bounds: 	(370.0@92.0) corner: (582.0@365.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(558628864)'Add category...' a ToggleM...etc...
		fullBounds: 	(370.0@92.0) corner: (582.0@365.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (994574336) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(264765440)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(558628864)'Add category.....etc...



--- The full stack ---
UTF8TextConverter(Object)>>error:
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
MultiByteFileStream>>peek
MultiByteFileStream(PositionableStream)>>back
MultiByteFileStream(PositionableStream)>>backChunk
WriteStream(PositionableStream)>>copyPreamble:from:at:
Compte class(ClassDescription)>>printMethodChunk:withPreamble:on:moveSource:toFile:
[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
Array(SequenceableCollection)>>do:
Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
Array(SequenceableCollection)>>do:
Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
Compte class(Class)>>fileOutOn:moveSource:toFile:initializing:
[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; nextPut: Character newPage; cr].
	each
		fileOutOn: aFileStream
		moveSource: false
		toFile: 0
		initializing: false] in SystemOrganizer>>fileOutCategory:on:initializing:
Array(SequenceableCollection)>>do:
SystemOrganizer>>fileOutCategory:on:initializing:
SystemOrganizer>>fileOutCategory:
OBClassCategoryNode>>fileOut
OBCmdFileOut>>execute
OBCmdFileOut(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid utf8 input detected
12 November 2013 12:03:58.488 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

UTF8TextConverter(Object)>>error:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aString: 	'Invalid utf8 input detected'
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/P...etc...
		character1: 	$©
		value1: 	169
		character2: 	$t
		value2: 	116
		unicode: 	nil
		character3: 	$i
		value3: 	105
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>peek
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		next: 	nil
		save: 	13005596
	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>back
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>backChunk
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		terminator: 	$!
		out: 	a WriteStream
		ch: 	$t
	Receiver's instance variables: 



WriteStream(PositionableStream)>>copyPreamble:from:at:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		preamble: 	'Compte methodsFor: ''metier'''
		aStream: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/P...etc...
		pos: 	13005649
		terminator: 	$!
		last50: 	nil
		stamp: 	nil
		i: 	nil
	Receiver's instance variables: 
		collection: 	'Object subclass: #Compte
	instanceVariableNames: ''proprio solde''...etc...
		position: 	323
		readLimit: 	0
		writeLimit: 	1000


Compte class(ClassDescription)>>printMethodChunk:withPreamble:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		selector: 	#deposer:
		doPreamble: 	true
		outStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		preamble: 	'Compte methodsFor: ''metier'''
		method: 	(Compte>>#deposer: "a CompiledMethod(493879296)")
		oldPos: 	13005649
		newPos: 	nil
		sourceFile: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltal...etc...
		endPos: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	#deposer:
		moveSource: 	a WriteStream
		fileIndex: 	false
		sel: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: #(#deposer: #getSolde #retrait:)
	Arguments and temporary variables: 
		aBlock: 	[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileSt...etc...
		index: 	1
		indexLimiT: 	3
	Receiver's instance variables: 
#(#deposer: #getSolde #retrait:)

Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aSymbol: 	#metier
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		selectors: 	#(#deposer: #getSolde #retrait:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	#metier
		moveSource: 	a WriteStream
		fileIndex: 	false
		heading: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: #(#'initialize-release' #metier)
	Arguments and temporary variables: 
		aBlock: 	[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSou...etc...
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
#(#'initialize-release' #metier)

Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Compte class(Class)>>fileOutOn:moveSource:toFile:initializing:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		aBool: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; nextPut: Character newPage; cr].
	each
		fileOutOn: aFileStream
		moveSource: false
		toFile: 0
		initializing: false] in SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


Array(SequenceableCollection)>>do:
	Receiver: {Compte. Bank}
	Arguments and temporary variables: 
		aBlock: 	[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; ...etc...
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
{Compte. Bank}

SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


SystemOrganizer>>fileOutCategory:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
		category: 	#METAPROG
		internalStream: 	a WriteStream
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


OBClassCategoryNode>>fileOut
	Receiver: OBClassCategoryNode<METAPROG>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	ClassCategory
#classes->Class
#comments->ClassComment
#metaclasses->M...etc...
		environment: 	Smalltalk
		name: 	#METAPROG


OBCmdFileOut>>execute
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassCategoryNode<METAPROG>
		requestor: 	an OBColumn(METAPROG)


OBCmdFileOut(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(357826560)
	Receiver's instance variables: 
		target: 	OBClassCategoryNode<METAPROG>
		requestor: 	an OBColumn(METAPROG)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(168034304)'File out'
	Arguments and temporary variables: 
		evt: 	[(427@210) mouseUp 6890063 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(384.0@208.0) corner: (586.0@222.0)
		owner: 	a MenuMorph(1071120384)
		submorphs: 	#()
		fullBounds: 	(384.0@208.0) corner: (586.0@222.0)
		color: 	Color black
		extension: 	a MorphExtension (178257920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(168034304)'File out'
	Arguments and temporary variables: 
		evt: 	[(427@210) mouseUp 6890063 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(384.0@208.0) corner: (586.0@222.0)
		owner: 	a MenuMorph(1071120384)
		submorphs: 	#()
		fullBounds: 	(384.0@208.0) corner: (586.0@222.0)
		color: 	Color black
		extension: 	a MorphExtension (178257920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(168034304)'File out'
	Arguments and temporary variables: 
		evt: 	[(427@210) mouseUp 6890063 nil]
	Receiver's instance variables: 
		bounds: 	(384.0@208.0) corner: (586.0@222.0)
		owner: 	a MenuMorph(1071120384)
		submorphs: 	#()
		fullBounds: 	(384.0@208.0) corner: (586.0@222.0)
		color: 	Color black
		extension: 	a MorphExtension (178257920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(168034304)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(427@210) mouseUp 6890063 nil]
	Receiver's instance variables: 
		bounds: 	(384.0@208.0) corner: (586.0@222.0)
		owner: 	a MenuMorph(1071120384)
		submorphs: 	#()
		fullBounds: 	(384.0@208.0) corner: (586.0@222.0)
		color: 	Color black
		extension: 	a MorphExtension (178257920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MouseButtonEvent>>sentTo:
	Receiver: [(427@210) mouseUp 6890063 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(168034304)'File out'
	Receiver's instance variables: 
		timeStamp: 	6890063
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(427@210)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(168034304)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(427@210) mouseUp 6890063 nil]
	Receiver's instance variables: 
		bounds: 	(384.0@208.0) corner: (586.0@222.0)
		owner: 	a MenuMorph(1071120384)
		submorphs: 	#()
		fullBounds: 	(384.0@208.0) corner: (586.0@222.0)
		color: 	Color black
		extension: 	a MorphExtension (178257920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(427@210) mouseUp 6890063 nil]
		aMorph: 	a ToggleMenuItemMorph(168034304)'File out'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(427@210) mouseUp 6890063 nil]
		aMorph: 	a ToggleMenuItemMorph(168034304)'File out'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(168034304)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(427@210) mouseUp 6890063 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(384.0@208.0) corner: (586.0@222.0)
		owner: 	a MenuMorph(1071120384)
		submorphs: 	#()
		fullBounds: 	(384.0@208.0) corner: (586.0@222.0)
		color: 	Color black
		extension: 	a MorphExtension (178257920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(427@210) mouseUp 6890063 nil]
		aMorph: 	a MenuMorph(1071120384)
		localEvt: 	[(427@210) mouseUp 6890063 nil]
		index: 	9
		child: 	a ToggleMenuItemMorph(168034304)'File out'
		morphs: 	an Array(a ToggleMenuItemMorph(461897728)'Add category...' a ToggleMenu...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(427@210) mouseUp 6890063 nil]
		aMorph: 	a MenuMorph(1071120384)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1071120384)
	Arguments and temporary variables: 
		anEvent: 	[(427@210) mouseUp 6890063 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(379.0@99.0) corner: (591.0@357.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(461897728)'Add category...' a ToggleM...etc...
		fullBounds: 	(379.0@99.0) corner: (591.0@357.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (12320768) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(168034304)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(461897728)'Add category.....etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1071120384)
	Arguments and temporary variables: 
		anEvent: 	[(427@210) mouseUp 6890063 nil]
	Receiver's instance variables: 
		bounds: 	(379.0@99.0) corner: (591.0@357.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(461897728)'Add category...' a ToggleM...etc...
		fullBounds: 	(379.0@99.0) corner: (591.0@357.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (12320768) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(168034304)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(461897728)'Add category.....etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(1071120384)
	Arguments and temporary variables: 
		evt: 	[(427@210) mouseUp 6890063 nil]
	Receiver's instance variables: 
		bounds: 	(379.0@99.0) corner: (591.0@357.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(461897728)'Add category...' a ToggleM...etc...
		fullBounds: 	(379.0@99.0) corner: (591.0@357.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (12320768) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(168034304)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(461897728)'Add category.....etc...



--- The full stack ---
UTF8TextConverter(Object)>>error:
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
MultiByteFileStream>>peek
MultiByteFileStream(PositionableStream)>>back
MultiByteFileStream(PositionableStream)>>backChunk
WriteStream(PositionableStream)>>copyPreamble:from:at:
Compte class(ClassDescription)>>printMethodChunk:withPreamble:on:moveSource:toFile:
[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
Array(SequenceableCollection)>>do:
Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
Array(SequenceableCollection)>>do:
Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
Compte class(Class)>>fileOutOn:moveSource:toFile:initializing:
[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; nextPut: Character newPage; cr].
	each
		fileOutOn: aFileStream
		moveSource: false
		toFile: 0
		initializing: false] in SystemOrganizer>>fileOutCategory:on:initializing:
Array(SequenceableCollection)>>do:
SystemOrganizer>>fileOutCategory:on:initializing:
SystemOrganizer>>fileOutCategory:
OBClassCategoryNode>>fileOut
OBCmdFileOut>>execute
OBCmdFileOut(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid utf8 input detected
12 November 2013 12:04:17.844 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

UTF8TextConverter(Object)>>error:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aString: 	'Invalid utf8 input detected'
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/P...etc...
		character1: 	$©
		value1: 	169
		character2: 	$t
		value2: 	116
		unicode: 	nil
		character3: 	$i
		value3: 	105
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>peek
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		next: 	nil
		save: 	13005596
	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>back
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>backChunk
	Receiver: MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/Pharo-1.4-one-click.a...etc...
	Arguments and temporary variables: 
		terminator: 	$!
		out: 	a WriteStream
		ch: 	$t
	Receiver's instance variables: 



WriteStream(PositionableStream)>>copyPreamble:from:at:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		preamble: 	'Compte methodsFor: ''metier'''
		aStream: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltalk/P...etc...
		pos: 	13005649
		terminator: 	$!
		last50: 	nil
		stamp: 	nil
		i: 	nil
	Receiver's instance variables: 
		collection: 	'Object subclass: #Compte
	instanceVariableNames: ''proprio solde''...etc...
		position: 	323
		readLimit: 	0
		writeLimit: 	1000


Compte class(ClassDescription)>>printMethodChunk:withPreamble:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		selector: 	#deposer:
		doPreamble: 	true
		outStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		preamble: 	'Compte methodsFor: ''metier'''
		method: 	(Compte>>#deposer: "a CompiledMethod(493879296)")
		oldPos: 	13005649
		newPos: 	nil
		sourceFile: 	MultiByteFileStream: '/auto_home/fpetitdemang/M2/meta-prog/smalltal...etc...
		endPos: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	#deposer:
		moveSource: 	a WriteStream
		fileIndex: 	false
		sel: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: #(#deposer: #getSolde #retrait:)
	Arguments and temporary variables: 
		aBlock: 	[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileSt...etc...
		index: 	1
		indexLimiT: 	3
	Receiver's instance variables: 
#(#deposer: #getSolde #retrait:)

Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aSymbol: 	#metier
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		selectors: 	#(#deposer: #getSolde #retrait:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	#metier
		moveSource: 	a WriteStream
		fileIndex: 	false
		heading: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Array(SequenceableCollection)>>do:
	Receiver: #(#'initialize-release' #metier)
	Arguments and temporary variables: 
		aBlock: 	[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSou...etc...
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
#(#'initialize-release' #metier)

Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


Compte class(Class)>>fileOutOn:moveSource:toFile:initializing:
	Receiver: Compte
	Arguments and temporary variables: 
		aFileStream: 	a WriteStream
		moveSource: 	false
		fileIndex: 	0
		aBool: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil


[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; nextPut: Character newPage; cr].
	each
		fileOutOn: aFileStream
		moveSource: false
		toFile: 0
		initializing: false] in SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


Array(SequenceableCollection)>>do:
	Receiver: {Compte. Bank}
	Arguments and temporary variables: 
		aBlock: 	[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; ...etc...
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
{Compte. Bank}

SystemOrganizer>>fileOutCategory:on:initializing:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


SystemOrganizer>>fileOutCategory:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet AnnouncementSubscription Announcer Lega...etc...
	Arguments and temporary variables: 
		category: 	#METAPROG
		internalStream: 	a WriteStream
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-Help' #'Announcements-Te...etc...
		categoryStops: 	#(8 11 17 18 23 27 37 41 46 50 57 58 60 65 68 77 78 89 96 106 12...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #AnnouncementSubscription #Annou...etc...
		environment: 	a SystemDictionary(lots of globals)


OBClassCategoryNode>>fileOut
	Receiver: OBClassCategoryNode<METAPROG>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	ClassCategory
#classes->Class
#comments->ClassComment
#metaclasses->M...etc...
		environment: 	Smalltalk
		name: 	#METAPROG


OBCmdFileOut>>execute
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassCategoryNode<METAPROG>
		requestor: 	an OBColumn(METAPROG)


OBCmdFileOut(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(357826560)
	Receiver's instance variables: 
		target: 	OBClassCategoryNode<METAPROG>
		requestor: 	an OBColumn(METAPROG)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(373817344)'File out'
	Arguments and temporary variables: 
		evt: 	[(440@217) mouseUp 6909415 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(368.0@211.0) corner: (570.0@225.0)
		owner: 	a MenuMorph(197132288)
		submorphs: 	#()
		fullBounds: 	(368.0@211.0) corner: (570.0@225.0)
		color: 	Color black
		extension: 	a MorphExtension (384040960)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(373817344)'File out'
	Arguments and temporary variables: 
		evt: 	[(440@217) mouseUp 6909415 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(368.0@211.0) corner: (570.0@225.0)
		owner: 	a MenuMorph(197132288)
		submorphs: 	#()
		fullBounds: 	(368.0@211.0) corner: (570.0@225.0)
		color: 	Color black
		extension: 	a MorphExtension (384040960)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(373817344)'File out'
	Arguments and temporary variables: 
		evt: 	[(440@217) mouseUp 6909415 nil]
	Receiver's instance variables: 
		bounds: 	(368.0@211.0) corner: (570.0@225.0)
		owner: 	a MenuMorph(197132288)
		submorphs: 	#()
		fullBounds: 	(368.0@211.0) corner: (570.0@225.0)
		color: 	Color black
		extension: 	a MorphExtension (384040960)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(373817344)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(440@217) mouseUp 6909415 nil]
	Receiver's instance variables: 
		bounds: 	(368.0@211.0) corner: (570.0@225.0)
		owner: 	a MenuMorph(197132288)
		submorphs: 	#()
		fullBounds: 	(368.0@211.0) corner: (570.0@225.0)
		color: 	Color black
		extension: 	a MorphExtension (384040960)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MouseButtonEvent>>sentTo:
	Receiver: [(440@217) mouseUp 6909415 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(373817344)'File out'
	Receiver's instance variables: 
		timeStamp: 	6909415
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(440@217)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(373817344)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(440@217) mouseUp 6909415 nil]
	Receiver's instance variables: 
		bounds: 	(368.0@211.0) corner: (570.0@225.0)
		owner: 	a MenuMorph(197132288)
		submorphs: 	#()
		fullBounds: 	(368.0@211.0) corner: (570.0@225.0)
		color: 	Color black
		extension: 	a MorphExtension (384040960)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(440@217) mouseUp 6909415 nil]
		aMorph: 	a ToggleMenuItemMorph(373817344)'File out'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(440@217) mouseUp 6909415 nil]
		aMorph: 	a ToggleMenuItemMorph(373817344)'File out'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(373817344)'File out'
	Arguments and temporary variables: 
		anEvent: 	[(440@217) mouseUp 6909415 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(368.0@211.0) corner: (570.0@225.0)
		owner: 	a MenuMorph(197132288)
		submorphs: 	#()
		fullBounds: 	(368.0@211.0) corner: (570.0@225.0)
		color: 	Color black
		extension: 	a MorphExtension (384040960)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(357826560))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+o'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(440@217) mouseUp 6909415 nil]
		aMorph: 	a MenuMorph(197132288)
		localEvt: 	[(440@217) mouseUp 6909415 nil]
		index: 	9
		child: 	a ToggleMenuItemMorph(373817344)'File out'
		morphs: 	an Array(a ToggleMenuItemMorph(655622144)'Add category...' a ToggleMenu...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(440@217) mouseUp 6909415 nil]
		aMorph: 	a MenuMorph(197132288)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(197132288)
	Arguments and temporary variables: 
		anEvent: 	[(440@217) mouseUp 6909415 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(363.0@102.0) corner: (575.0@360.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(655622144)'Add category...' a ToggleM...etc...
		fullBounds: 	(363.0@102.0) corner: (575.0@360.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (212074496) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(373817344)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(655622144)'Add category.....etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(197132288)
	Arguments and temporary variables: 
		anEvent: 	[(440@217) mouseUp 6909415 nil]
	Receiver's instance variables: 
		bounds: 	(363.0@102.0) corner: (575.0@360.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(655622144)'Add category...' a ToggleM...etc...
		fullBounds: 	(363.0@102.0) corner: (575.0@360.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (212074496) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(373817344)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(655622144)'Add category.....etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(197132288)
	Arguments and temporary variables: 
		evt: 	[(440@217) mouseUp 6909415 nil]
	Receiver's instance variables: 
		bounds: 	(363.0@102.0) corner: (575.0@360.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(655622144)'Add category...' a ToggleM...etc...
		fullBounds: 	(363.0@102.0) corner: (575.0@360.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (212074496) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBColumn(METAPROG)
		selectedItem: 	a ToggleMenuItemMorph(373817344)'File out'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(655622144)'Add category.....etc...



--- The full stack ---
UTF8TextConverter(Object)>>error:
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
MultiByteFileStream>>peek
MultiByteFileStream(PositionableStream)>>back
MultiByteFileStream(PositionableStream)>>backChunk
WriteStream(PositionableStream)>>copyPreamble:from:at:
Compte class(ClassDescription)>>printMethodChunk:withPreamble:on:moveSource:toFile:
[:sel | self
		printMethodChunk: sel
		withPreamble: true
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
Array(SequenceableCollection)>>do:
Compte class(ClassDescription)>>fileOutCategory:on:moveSource:toFile:
[:heading | self
		fileOutCategory: heading
		on: aFileStream
		moveSource: moveSource
		toFile: fileIndex] in Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
Array(SequenceableCollection)>>do:
Compte class(ClassDescription)>>fileOutOn:moveSource:toFile:
Compte class(Class)>>fileOutOn:moveSource:toFile:initializing:
[:each | 
first
		ifTrue: [first := false]
		ifFalse: [aFileStream cr; nextPut: Character newPage; cr].
	each
		fileOutOn: aFileStream
		moveSource: false
		toFile: 0
		initializing: false] in SystemOrganizer>>fileOutCategory:on:initializing:
Array(SequenceableCollection)>>do:
SystemOrganizer>>fileOutCategory:on:initializing:
SystemOrganizer>>fileOutCategory:
OBClassCategoryNode>>fileOut
OBCmdFileOut>>execute
OBCmdFileOut(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: A>>foo
19 November 2013 10:39:36.96 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

A(Object)>>doesNotUnderstand: #foo
	Receiver: an A
	Arguments and temporary variables: 
		aMessage: 	foo
		exception: 	MessageNotUnderstood: A>>foo
		resumeValue: 	nil
	Receiver's instance variables: 
an A

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(352321536)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ A new foo
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(542638080)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(352321536)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(352321536)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(352321536)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(352321536)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(455344128)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(130.0@217.0) corner: (570.0@384.0)
		owner: 	a SystemWindow(132382720)
		submorphs: 	an Array(a TransformMorph(727449600))
		fullBounds: 	(130@217) corner: (570@384)
		color: 	Color white
		extension: 	a MorphExtension (331087872) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(483131392)
		scroller: 	a TransformMorph(727449600)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(613679104)
		textMorph: 	a TextMorphForEditView(352321536)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(12 to: 11)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(455344128)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(130.0@217.0) corner: (570.0@384.0)
		owner: 	a SystemWindow(132382720)
		submorphs: 	an Array(a TransformMorph(727449600))
		fullBounds: 	(130@217) corner: (570@384)
		color: 	Color white
		extension: 	a MorphExtension (331087872) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(483131392)
		scroller: 	a TransformMorph(727449600)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(613679104)
		textMorph: 	a TextMorphForEditView(352321536)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(12 to: 11)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(352321536)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@34)
		owner: 	a TransformMorph(727449600)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@34)
		color: 	Color black
		extension: 	a MorphExtension (434896896) [other:  (blinkStart -> 1273168) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(A new) foo
'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(455344128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(455344128)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(130.0@217.0) corner: (570.0@384.0)
		owner: 	a SystemWindow(132382720)
		submorphs: 	an Array(a TransformMorph(727449600))
		fullBounds: 	(130@217) corner: (570@384)
		color: 	Color white
		extension: 	a MorphExtension (331087872) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(483131392)
		scroller: 	a TransformMorph(727449600)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(613679104)
		textMorph: 	a TextMorphForEditView(352321536)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(12 to: 11)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(455344128)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(130.0@217.0) corner: (570.0@384.0)
		owner: 	a SystemWindow(132382720)
		submorphs: 	an Array(a TransformMorph(727449600))
		fullBounds: 	(130@217) corner: (570@384)
		color: 	Color white
		extension: 	a MorphExtension (331087872) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(483131392)
		scroller: 	a TransformMorph(727449600)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(613679104)
		textMorph: 	a TextMorphForEditView(352321536)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(12 to: 11)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(455344128)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(132382720) a PluggableTextMorph(45...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(575668224)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(254@233) mouseUp 1273680 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(248.0@223.0) corner: (391.0@241.0)
		owner: 	a MenuMorph(731119616)
		submorphs: 	#()
		fullBounds: 	(248.0@223.0) corner: (391.0@241.0)
		color: 	Color black
		extension: 	a MorphExtension (585891840)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(455344128))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(575668224)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(254@233) mouseUp 1273680 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(248.0@223.0) corner: (391.0@241.0)
		owner: 	a MenuMorph(731119616)
		submorphs: 	#()
		fullBounds: 	(248.0@223.0) corner: (391.0@241.0)
		color: 	Color black
		extension: 	a MorphExtension (585891840)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(455344128))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(575668224)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(254@233) mouseUp 1273680 nil]
	Receiver's instance variables: 
		bounds: 	(248.0@223.0) corner: (391.0@241.0)
		owner: 	a MenuMorph(731119616)
		submorphs: 	#()
		fullBounds: 	(248.0@223.0) corner: (391.0@241.0)
		color: 	Color black
		extension: 	a MorphExtension (585891840)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(455344128))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(575668224)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(254@233) mouseUp 1273680 nil]
	Receiver's instance variables: 
		bounds: 	(248.0@223.0) corner: (391.0@241.0)
		owner: 	a MenuMorph(731119616)
		submorphs: 	#()
		fullBounds: 	(248.0@223.0) corner: (391.0@241.0)
		color: 	Color black
		extension: 	a MorphExtension (585891840)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(455344128))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(254@233) mouseUp 1273680 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(575668224)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	1273680
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(254@233)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(575668224)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(254@233) mouseUp 1273680 nil]
	Receiver's instance variables: 
		bounds: 	(248.0@223.0) corner: (391.0@241.0)
		owner: 	a MenuMorph(731119616)
		submorphs: 	#()
		fullBounds: 	(248.0@223.0) corner: (391.0@241.0)
		color: 	Color black
		extension: 	a MorphExtension (585891840)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(455344128))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(254@233) mouseUp 1273680 nil]
		aMorph: 	a ToggleMenuItemMorph(575668224)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(254@233) mouseUp 1273680 nil]
		aMorph: 	a ToggleMenuItemMorph(575668224)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(575668224)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(254@233) mouseUp 1273680 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(248.0@223.0) corner: (391.0@241.0)
		owner: 	a MenuMorph(731119616)
		submorphs: 	#()
		fullBounds: 	(248.0@223.0) corner: (391.0@241.0)
		color: 	Color black
		extension: 	a MorphExtension (585891840)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(455344128))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(254@233) mouseUp 1273680 nil]
		aMorph: 	a MenuMorph(731119616)
		localEvt: 	[(254@233) mouseUp 1273680 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(575668224)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(575668224)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(254@233) mouseUp 1273680 nil]
		aMorph: 	a MenuMorph(731119616)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(731119616)
	Arguments and temporary variables: 
		anEvent: 	[(254@233) mouseUp 1273680 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(243.0@218.0) corner: (396.0@558.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(575668224)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(243.0@218.0) corner: (396.0@558.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (746061824) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(575668224)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(575668224)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(731119616)
	Arguments and temporary variables: 
		anEvent: 	[(254@233) mouseUp 1273680 nil]
	Receiver's instance variables: 
		bounds: 	(243.0@218.0) corner: (396.0@558.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(575668224)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(243.0@218.0) corner: (396.0@558.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (746061824) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(575668224)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(575668224)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(731119616)
	Arguments and temporary variables: 
		evt: 	[(254@233) mouseUp 1273680 nil]
	Receiver's instance variables: 
		bounds: 	(243.0@218.0) corner: (396.0@558.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(575668224)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(243.0@218.0) corner: (396.0@558.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (746061824) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(575668224)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(575668224)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(254@233) mouseUp 1273680 nil]
		focusHolder: 	a MenuMorph(731119616)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(254@233) corner: (270@249)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(254@233) corner: (270@249)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(254@233) mouseOver nil nil]
		targetOffset: 	(6.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1273680 254 233 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(132382720) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(254@233) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(132382720) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(254@233) mouseUp 1273680 nil]
		focusHolder: 	a MenuMorph(731119616)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(254@233) corner: (270@249)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(254@233) corner: (270@249)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(254@233) mouseOver nil nil]
		targetOffset: 	(6.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1273680 254 233 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(254@233) mouseUp 1273680 nil]
		focusHolder: 	a MenuMorph(731119616)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(254@233) corner: (270@249)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(254@233) corner: (270@249)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(254@233) mouseOver nil nil]
		targetOffset: 	(6.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1273680 254 233 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(254@233) mouseUp 1273680 nil]
	Receiver's instance variables: 
		bounds: 	(254@233) corner: (270@249)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(254@233) corner: (270@249)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(254@233) mouseOver nil nil]
		targetOffset: 	(6.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1273680 254 233 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(254@233) mouseUp 1273680 nil]
		evt: 	[(254@233) mouseUp 1273680 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(254@233) corner: (270@249)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(254@233) corner: (270@249)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(254@233) mouseOver nil nil]
		targetOffset: 	(6.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1273680 254 233 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(254@233) mouseUp 1273680 nil]
		evtBuf: 	#(1 1273680 254 233 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(254@233) corner: (270@249)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(254@233) corner: (270@249)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(254@233) mouseOver nil nil]
		targetOffset: 	(6.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1273680 254 233 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (1280@977)
		canvas: 	a FormCanvas on: DisplayScreen(1280x977x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(249823232))(an OBSys...etc...
		lastStepTime: 	1274222
		lastStepMessage: 	nil
		lastCycleTime: 	1274222
		alarms: 	a Heap()
		lastAlarmTime: 	1274222
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
A(Object)>>doesNotUnderstand: #foo
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
SmalltalkEditor(TextEditor)>>mouseUp:
[editor mouseUp: evt] in TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>mouseUp:
TextMorphForEditView>>mouseUp:
TextMorphForEditView(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: A class>>foo
19 November 2013 10:39:48.596 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

A class(Object)>>doesNotUnderstand: #foo
	Receiver: A
	Arguments and temporary variables: 
		aMessage: 	foo
		exception: 	MessageNotUnderstood: A class>>foo
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#A
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Teste
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(352321536)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ A foo
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(853540864)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(352321536)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(352321536)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(352321536)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(352321536)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(455344128)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(130.0@217.0) corner: (570.0@384.0)
		owner: 	a SystemWindow(132382720)
		submorphs: 	an Array(a TransformMorph(727449600))
		fullBounds: 	(130@217) corner: (570@384)
		color: 	Color white
		extension: 	a MorphExtension (331087872) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(483131392)
		scroller: 	a TransformMorph(727449600)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(613679104)
		textMorph: 	a TextMorphForEditView(352321536)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(455344128)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(130.0@217.0) corner: (570.0@384.0)
		owner: 	a SystemWindow(132382720)
		submorphs: 	an Array(a TransformMorph(727449600))
		fullBounds: 	(130@217) corner: (570@384)
		color: 	Color white
		extension: 	a MorphExtension (331087872) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(483131392)
		scroller: 	a TransformMorph(727449600)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(613679104)
		textMorph: 	a TextMorphForEditView(352321536)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(352321536)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@34)
		owner: 	a TransformMorph(727449600)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@34)
		color: 	Color black
		extension: 	a MorphExtension (434896896) [other:  (blinkStart -> 1285182) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'A foo
'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(455344128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(455344128)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(130.0@217.0) corner: (570.0@384.0)
		owner: 	a SystemWindow(132382720)
		submorphs: 	an Array(a TransformMorph(727449600))
		fullBounds: 	(130@217) corner: (570@384)
		color: 	Color white
		extension: 	a MorphExtension (331087872) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(483131392)
		scroller: 	a TransformMorph(727449600)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(613679104)
		textMorph: 	a TextMorphForEditView(352321536)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(455344128)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(130.0@217.0) corner: (570.0@384.0)
		owner: 	a SystemWindow(132382720)
		submorphs: 	an Array(a TransformMorph(727449600))
		fullBounds: 	(130@217) corner: (570@384)
		color: 	Color white
		extension: 	a MorphExtension (331087872) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(483131392)
		scroller: 	a TransformMorph(727449600)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(613679104)
		textMorph: 	a TextMorphForEditView(352321536)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(455344128)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(132382720) a PluggableTextMorph(45...etc...
		contents: 	''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(657195008)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(260@262) mouseUp 1285432 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(245.0@257.0) corner: (388.0@275.0)
		owner: 	a MenuMorph(110100480)
		submorphs: 	#()
		fullBounds: 	(245.0@257.0) corner: (388.0@275.0)
		color: 	Color black
		extension: 	a MorphExtension (667418624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(455344128))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(657195008)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(260@262) mouseUp 1285432 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(245.0@257.0) corner: (388.0@275.0)
		owner: 	a MenuMorph(110100480)
		submorphs: 	#()
		fullBounds: 	(245.0@257.0) corner: (388.0@275.0)
		color: 	Color black
		extension: 	a MorphExtension (667418624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(455344128))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(657195008)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[(260@262) mouseUp 1285432 nil]
	Receiver's instance variables: 
		bounds: 	(245.0@257.0) corner: (388.0@275.0)
		owner: 	a MenuMorph(110100480)
		submorphs: 	#()
		fullBounds: 	(245.0@257.0) corner: (388.0@275.0)
		color: 	Color black
		extension: 	a MorphExtension (667418624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(455344128))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(657195008)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(260@262) mouseUp 1285432 nil]
	Receiver's instance variables: 
		bounds: 	(245.0@257.0) corner: (388.0@275.0)
		owner: 	a MenuMorph(110100480)
		submorphs: 	#()
		fullBounds: 	(245.0@257.0) corner: (388.0@275.0)
		color: 	Color black
		extension: 	a MorphExtension (667418624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(455344128))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(260@262) mouseUp 1285432 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(657195008)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	1285432
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(260@262)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(657195008)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(260@262) mouseUp 1285432 nil]
	Receiver's instance variables: 
		bounds: 	(245.0@257.0) corner: (388.0@275.0)
		owner: 	a MenuMorph(110100480)
		submorphs: 	#()
		fullBounds: 	(245.0@257.0) corner: (388.0@275.0)
		color: 	Color black
		extension: 	a MorphExtension (667418624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(455344128))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(260@262) mouseUp 1285432 nil]
		aMorph: 	a ToggleMenuItemMorph(657195008)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(260@262) mouseUp 1285432 nil]
		aMorph: 	a ToggleMenuItemMorph(657195008)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(657195008)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[(260@262) mouseUp 1285432 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(245.0@257.0) corner: (388.0@275.0)
		owner: 	a MenuMorph(110100480)
		submorphs: 	#()
		fullBounds: 	(245.0@257.0) corner: (388.0@275.0)
		color: 	Color black
		extension: 	a MorphExtension (667418624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(455344128))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(260@262) mouseUp 1285432 nil]
		aMorph: 	a MenuMorph(110100480)
		localEvt: 	[(260@262) mouseUp 1285432 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(657195008)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(657195008)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(260@262) mouseUp 1285432 nil]
		aMorph: 	a MenuMorph(110100480)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(110100480)
	Arguments and temporary variables: 
		anEvent: 	[(260@262) mouseUp 1285432 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(240.0@252.0) corner: (393.0@592.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(657195008)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(240.0@252.0) corner: (393.0@592.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (125042688) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(657195008)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(657195008)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(110100480)
	Arguments and temporary variables: 
		anEvent: 	[(260@262) mouseUp 1285432 nil]
	Receiver's instance variables: 
		bounds: 	(240.0@252.0) corner: (393.0@592.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(657195008)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(240.0@252.0) corner: (393.0@592.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (125042688) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(657195008)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(657195008)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(110100480)
	Arguments and temporary variables: 
		evt: 	[(260@262) mouseUp 1285432 nil]
	Receiver's instance variables: 
		bounds: 	(240.0@252.0) corner: (393.0@592.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(657195008)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	(240.0@252.0) corner: (393.0@592.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (125042688) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(657195008)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(657195008)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(260@262) mouseUp 1285432 nil]
		focusHolder: 	a MenuMorph(110100480)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(260@262) corner: (276@278)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(260@262) corner: (276@278)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(260@262) mouseOver nil nil]
		targetOffset: 	(15.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1285432 260 262 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(132382720) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(260@262) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1280@977)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(132382720) an OBSy...etc...
		fullBounds: 	(0@0) corner: (1280@977)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(260@262) mouseUp 1285432 nil]
		focusHolder: 	a MenuMorph(110100480)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(260@262) corner: (276@278)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(260@262) corner: (276@278)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(260@262) mouseOver nil nil]
		targetOffset: 	(15.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1285432 260 262 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(260@262) mouseUp 1285432 nil]
		focusHolder: 	a MenuMorph(110100480)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(260@262) corner: (276@278)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(260@262) corner: (276@278)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(260@262) mouseOver nil nil]
		targetOffset: 	(15.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1285432 260 262 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(260@262) mouseUp 1285432 nil]
	Receiver's instance variables: 
		bounds: 	(260@262) corner: (276@278)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(260@262) corner: (276@278)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(260@262) mouseOver nil nil]
		targetOffset: 	(15.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1285432 260 262 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(260@262) mouseUp 1285432 nil]
		evt: 	[(260@262) mouseUp 1285432 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(260@262) corner: (276@278)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(260@262) corner: (276@278)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(260@262) mouseOver nil nil]
		targetOffset: 	(15.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1285432 260 262 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(260@262) mouseUp 1285432 nil]
		evtBuf: 	#(1 1285432 260 262 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(260@262) corner: (276@278)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(260@262) corner: (276@278)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(260@262) mouseOver nil nil]
		targetOffset: 	(15.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1285432 260 262 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (1280@977)
		canvas: 	a FormCanvas on: DisplayScreen(1280x977x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(249823232))(an OBSys...etc...
		lastStepTime: 	1285602
		lastStepMessage: 	nil
		lastCycleTime: 	1285602
		alarms: 	a Heap()
		lastAlarmTime: 	1285602
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
A class(Object)>>doesNotUnderstand: #foo
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
PluggableTextMorph(ScrollPane)>>mouseDown:
PluggableTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
PluggableTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: OBSelectorNode>>theClass
19 November 2013 10:46:28.156 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

OBSelectorNode(Object)>>doesNotUnderstand: #theClass
	Receiver: an OBSelectorNode
	Arguments and temporary variables: 
		aMessage: 	theClass
		exception: 	MessageNotUnderstood: OBSelectorNode>>theClass
		resumeValue: 	nil
	Receiver's instance variables: 
		metaNode: 	Selector
#implementors->Implementor

		selector: 	#metaclasses
		methods: 	nil


ORCmdSwapMethodRefactoring>>label
	Receiver: an ORCmdSwapMethodRefactoring
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBMercuryPanel
		model: 	nil


ORCmdSwapMethodRefactoring(OBCommand)>>order
	Receiver: an ORCmdSwapMethodRefactoring
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBMercuryPanel
		model: 	nil


[:a :b | a order <= b order] in [:ea | ea asArray
		sort: [:a :b | a order <= b order]] in OBCommandCluster>>groupedCommands
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		a: 	an ORCmdAddParameterMethodRefactoring
		b: 	an ORCmdSwapMethodRefactoring
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdAddParameterMethodRefactoring an ORCmdPullUpMe...etc...
		label: 	#'Refactor method'


Array(ArrayedCollection)>>mergeFirst:middle:last:into:by:
	Receiver: an Array(an ORCmdMoveMethodRefactoring an ORCmdPullUpMethodRefactoring an ORCmdPushDownMet...etc...
	Arguments and temporary variables: 
		first: 	6
		middle: 	7
		last: 	8
		dst: 	an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactorin...etc...
		aBlock: 	[:a :b | a order <= b order]
		i1: 	6
		i2: 	8
		val1: 	an ORCmdAddParameterMethodRefactoring
		val2: 	an ORCmdSwapMethodRefactoring
		out: 	5
	Receiver's instance variables: 
an Array(an ORCmdMoveMethodRefactoring an ORCmdPullUpMethodRefactoring an ORCmdPushDownMet...etc...

Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...
	Arguments and temporary variables: 
		first: 	6
		last: 	8
		src: 	an Array(an ORCmdMoveMethodRefactoring an ORCmdPullUpMethodRefactoring an ...etc...
		dst: 	an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactorin...etc...
		aBlock: 	[:a :b | a order <= b order]
		middle: 	7
	Receiver's instance variables: 
an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...

Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...
	Arguments and temporary variables: 
		first: 	6
		last: 	10
		src: 	an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactorin...etc...
		dst: 	an Array(an ORCmdMoveMethodRefactoring an ORCmdPullUpMethodRefactoring an ...etc...
		aBlock: 	[:a :b | a order <= b order]
		middle: 	8
	Receiver's instance variables: 
an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...

Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...
	Arguments and temporary variables: 
		first: 	1
		last: 	10
		src: 	an Array(an ORCmdMoveMethodRefactoring an ORCmdPullUpMethodRefactoring an ...etc...
		dst: 	an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactorin...etc...
		aBlock: 	[:a :b | a order <= b order]
		middle: 	5
	Receiver's instance variables: 
an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...

Array(ArrayedCollection)>>mergeSortFrom:to:by:
	Receiver: an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...
	Arguments and temporary variables: 
		startIndex: 	1
		stopIndex: 	10
		aBlock: 	[:a :b | a order <= b order]
	Receiver's instance variables: 
an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...

Array(ArrayedCollection)>>sort:
	Receiver: an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...
	Arguments and temporary variables: 
		aSortBlock: 	[:a :b | a order <= b order]
	Receiver's instance variables: 
an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...

[:ea | ea asArray
		sort: [:a :b | a order <= b order]] in OBCommandCluster>>groupedCommands
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		ea: 	an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdPullUpMethodRefactor...etc...
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdAddParameterMethodRefactoring an ORCmdPullUpMe...etc...
		label: 	#'Refactor method'


[:each | newCollection
		at: each key
		put: (aBlock value: each value)] in PluggableDictionary(Dictionary)>>collect:
	Receiver: a PluggableDictionary(#refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdP...etc...
	Arguments and temporary variables: 
		aBlock: 	#refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdPull...etc...
		newCollection: 	[:ea | ea asArray
		sort: [:a :b | a order <= b order]]
		each: 	a PluggableDictionary()
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil #refactory->an IdentitySet(an ORCmdRenameMethodRefactoring ...etc...
		hashBlock: 	[:integer | integer hash \\ 1064164 * 1009]
		equalBlock: 	nil


[:each | each
		ifNotNil: [aBlock value: each]] in PluggableDictionary(Dictionary)>>associationsDo:
	Receiver: a PluggableDictionary(#refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdP...etc...
	Arguments and temporary variables: 
		aBlock: 	#refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdPull...etc...
		each: 	[:each | newCollection
		at: each key
		put: (aBlock value: each value)]
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil #refactory->an IdentitySet(an ORCmdRenameMethodRefactoring ...etc...
		hashBlock: 	[:integer | integer hash \\ 1064164 * 1009]
		equalBlock: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil #refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdPullUpMeth...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	2
		indexLimiT: 	5
	Receiver's instance variables: 
an Array(nil #refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdPullUpMeth...etc...

PluggableDictionary(Dictionary)>>associationsDo:
	Receiver: a PluggableDictionary(#refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdP...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | newCollection
		at: each key
		put: (aBlock value: each value)...etc...
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil #refactory->an IdentitySet(an ORCmdRenameMethodRefactoring ...etc...
		hashBlock: 	[:integer | integer hash \\ 1064164 * 1009]
		equalBlock: 	nil


PluggableDictionary(Dictionary)>>collect:
	Receiver: a PluggableDictionary(#refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdP...etc...
	Arguments and temporary variables: 
		aBlock: 	[:ea | ea asArray
		sort: [:a :b | a order <= b order]]
		newCollection: 	a PluggableDictionary()
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil #refactory->an IdentitySet(an ORCmdRenameMethodRefactoring ...etc...
		hashBlock: 	[:integer | integer hash \\ 1064164 * 1009]
		equalBlock: 	nil


OBCommandCluster>>groupedCommands
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		groups: 	a PluggableDictionary(#refactory->an IdentitySet(an ORCmdRenameMethodRe...etc...
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdAddParameterMethodRefactoring an ORCmdPullUpMe...etc...
		label: 	#'Refactor method'


OBCommandCluster>>populateMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(780664832)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdAddParameterMethodRefactoring an ORCmdPullUpMe...etc...
		label: 	#'Refactor method'


OBCommandCluster>>addItemToMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(277348352)
		submenu: 	a MenuMorph(780664832)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdAddParameterMethodRefactoring an ORCmdPullUpMe...etc...
		label: 	#'Refactor method'


[:cmd | cmd addItemToMenu: aMenu] in [:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]] in OBCommandCluster>>populateMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	an OBCommandCluster
		cmd: 	a MenuMorph(277348352)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an OBCmdBrowseReferencesOfIt an OBPrintItTextCommand a...etc...
		label: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(an OBCommandCluster an OBCommandCluster)
	Arguments and temporary variables: 
		aBlock: 	[:cmd | cmd addItemToMenu: aMenu]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(an OBCommandCluster an OBCommandCluster)

[:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]] in OBCommandCluster>>populateMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	an Array(an OBCommandCluster an OBCommandCluster)
		group: 	a MenuMorph(277348352)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an OBCmdBrowseReferencesOfIt an OBPrintItTextCommand a...etc...
		label: 	nil


Array(SequenceableCollection)>>do:separatedBy:
	Receiver: an Array(an Array(an OBRedoTextCommand an OBUndoTextCommand) an Array(an OBCutTextCommand ...etc...
	Arguments and temporary variables: 
		elementBlock: 	[:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]]
		separatorBlock: 	[aMenu addLine]
		index: 	5
		indexLimiT: 	6
	Receiver's instance variables: 
an Array(an Array(an OBRedoTextCommand an OBUndoTextCommand) an Array(an OBCutTextCommand ...etc...

OBCommandCluster>>populateMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(277348352)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an OBCmdBrowseReferencesOfIt an OBPrintItTextCommand a...etc...
		label: 	nil


OBTextCommandScan(OBCommandScan)>>populateMenu:withNodes:forRequestor:
	Receiver: an OBTextCommandScan
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(277348352)
		aCollection: 	an Array(an OBTextMorphSelection)
		aRequestor: 	an OBMercuryPanel
		commands: 	an IdentitySet(an OBCopyTextCommand an OBCmdBrowseSendersOfIt an OBDo...etc...
		cluster: 	an OBCommandCluster
	Receiver's instance variables: 
		factories: 	an OrderedCollection(OBCmdBrowseSendersOfIt OBDoItTextCommand ORCmdS...etc...


OBMercuryPanel(OBTextPanel)>>menu:shifted:selection:
	Receiver: an OBMercuryPanel
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(277348352)
		aBoolean: 	false
		aTextSelection: 	an OBTextMorphSelection
	Receiver's instance variables: 
		browser: 	an OBImplementorsBrowser


OBPluggableTextMorph>>getMenu:
	Receiver: an OBPluggableTextMorph(915931136)
	Arguments and temporary variables: 
		aShiftKeyState: 	false
		menu: 	a MenuMorph(277348352)
	Receiver's instance variables: 
		bounds: 	(572.0@217.0) corner: (1262.0@233.0)
		owner: 	an OBGroupingMorph(645660672)
		submorphs: 	an Array(a TransformMorph(115605504))
		fullBounds: 	(572@217) corner: (1262@233)
		color: 	Color white
		extension: 	a MorphExtension (749731840) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBMercuryPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(943718400)
		scroller: 	a TransformMorph(115605504)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1835008)
		textMorph: 	an OBTextMorph(770965504)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
	Receiver: an OBPluggableTextMorph(915931136)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(572.0@217.0) corner: (1262.0@233.0)
		owner: 	an OBGroupingMorph(645660672)
		submorphs: 	an Array(a TransformMorph(115605504))
		fullBounds: 	(572@217) corner: (1262@233)
		color: 	Color white
		extension: 	a MorphExtension (749731840) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBMercuryPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(943718400)
		scroller: 	a TransformMorph(115605504)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1835008)
		textMorph: 	an OBTextMorph(770965504)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBTextMorph(TextMorphForEditView)>>escapePressed
	Receiver: an OBTextMorph(770965504)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (684@18)
		owner: 	a TransformMorph(115605504)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (684@18)
		color: 	Color black
		extension: 	a MorphExtension (853540864) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(915931136)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


SmalltalkEditor(Editor)>>escape:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		morph: 	an OBTextMorph(770965504)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	28
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#escape:
	Receiver's instance variables: 
		morph: 	an OBTextMorph(770965504)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
		return: 	[:val | ^ val]
		asciiValue: 	27
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(770965504)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(770965504)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		morph: 	an OBTextMorph(770965504)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	an OBTextMorph(770965504)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		morph: 	an OBTextMorph(770965504)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		morph: 	an OBTextMorph(770965504)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in OBTextMorph(TextMorph)>>basicKeyStroke:
	Receiver: an OBTextMorph(770965504)
	Arguments and temporary variables: 
		evt: 	[keystroke '<escape>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (684@18)
		owner: 	a TransformMorph(115605504)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (684@18)
		color: 	Color black
		extension: 	a MorphExtension (853540864) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(915931136)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBTextMorph(TextMorph)>>handleInteraction:
	Receiver: an OBTextMorph(770965504)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a Paragraph
		oldText: 	a Text for ''
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (684@18)
		owner: 	a TransformMorph(115605504)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (684@18)
		color: 	Color black
		extension: 	a MorphExtension (853540864) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(915931136)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
OBSelectorNode(Object)>>doesNotUnderstand: #theClass
ORCmdSwapMethodRefactoring>>label
ORCmdSwapMethodRefactoring(OBCommand)>>order
[:a :b | a order <= b order] in [:ea | ea asArray
		sort: [:a :b | a order <= b order]] in OBCommandCluster>>groupedCommands
Array(ArrayedCollection)>>mergeFirst:middle:last:into:by:
Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
Array(ArrayedCollection)>>mergeSortFrom:to:by:
Array(ArrayedCollection)>>sort:
[:ea | ea asArray
		sort: [:a :b | a order <= b order]] in OBCommandCluster>>groupedCommands
[:each | newCollection
		at: each key
		put: (aBlock value: each value)] in PluggableDictionary(Dictionary)>>collect:
[:each | each
		ifNotNil: [aBlock value: each]] in PluggableDictionary(Dictionary)>>associationsDo:
Array(SequenceableCollection)>>do:
PluggableDictionary(Dictionary)>>associationsDo:
PluggableDictionary(Dictionary)>>collect:
OBCommandCluster>>groupedCommands
OBCommandCluster>>populateMenu:
OBCommandCluster>>addItemToMenu:
[:cmd | cmd addItemToMenu: aMenu] in [:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]] in OBCommandCluster>>populateMenu:
Array(SequenceableCollection)>>do:
[:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]] in OBCommandCluster>>populateMenu:
Array(SequenceableCollection)>>do:separatedBy:
OBCommandCluster>>populateMenu:
OBTextCommandScan(OBCommandScan)>>populateMenu:withNodes:forRequestor:
OBMercuryPanel(OBTextPanel)>>menu:shifted:selection:
OBPluggableTextMorph>>getMenu:
OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
OBTextMorph(TextMorphForEditView)>>escapePressed
SmalltalkEditor(Editor)>>escape:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in OBTextMorph(TextMorph)>>basicKeyStroke:
OBTextMorph(TextMorph)>>handleInteraction:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBTextMorph(TextMorphForEditView)>>handleInteraction:
OBTextMorph(TextMorph)>>basicKeyStroke:
[self basicKeyStroke: evt] in OBTextMorph(TextMorph)>>keyStroke:
NOCController class(NECController class)>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
OBTextMorph(TextMorph)>>keyStroke:
OBTextMorph(TextMorphForEditView)>>keyStroke:
OBTextMorph>>keyStroke:
OBTextMorph(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
OBTextMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: OBSelectorNode>>theClass
19 November 2013 10:46:58.878 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

OBSelectorNode(Object)>>doesNotUnderstand: #theClass
	Receiver: an OBSelectorNode
	Arguments and temporary variables: 
		aMessage: 	theClass
		exception: 	MessageNotUnderstood: OBSelectorNode>>theClass
		resumeValue: 	nil
	Receiver's instance variables: 
		metaNode: 	Selector
#implementors->Implementor

		selector: 	#metaclasses
		methods: 	nil


ORCmdSwapMethodRefactoring>>label
	Receiver: an ORCmdSwapMethodRefactoring
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBMercuryPanel
		model: 	nil


ORCmdSwapMethodRefactoring(OBCommand)>>order
	Receiver: an ORCmdSwapMethodRefactoring
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBMercuryPanel
		model: 	nil


[:a :b | a order <= b order] in [:ea | ea asArray
		sort: [:a :b | a order <= b order]] in OBCommandCluster>>groupedCommands
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		a: 	an ORCmdInlineSelfSendsMethodRefactoring
		b: 	an ORCmdSwapMethodRefactoring
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParamete...etc...
		label: 	#'Refactor method'


Array(ArrayedCollection)>>mergeFirst:middle:last:into:by:
	Receiver: an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactoring an ORCmdRemove...etc...
	Arguments and temporary variables: 
		first: 	6
		middle: 	6
		last: 	7
		dst: 	an Array(an ORCmdInlineParameterRefactoring an ORCmdMoveMethodRefactoring ...etc...
		aBlock: 	[:a :b | a order <= b order]
		i1: 	6
		i2: 	7
		val1: 	an ORCmdInlineSelfSendsMethodRefactoring
		val2: 	an ORCmdSwapMethodRefactoring
		out: 	5
	Receiver's instance variables: 
an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactoring an ORCmdRemove...etc...

Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactoring an ORCmdRemove...etc...
	Arguments and temporary variables: 
		first: 	6
		last: 	7
		src: 	an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactorin...etc...
		dst: 	an Array(an ORCmdInlineParameterRefactoring an ORCmdMoveMethodRefactoring ...etc...
		aBlock: 	[:a :b | a order <= b order]
		middle: 	6
	Receiver's instance variables: 
an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactoring an ORCmdRemove...etc...

Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactoring an ORCmdRemove...etc...
	Arguments and temporary variables: 
		first: 	6
		last: 	8
		src: 	an Array(an ORCmdInlineParameterRefactoring an ORCmdMoveMethodRefactoring ...etc...
		dst: 	an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactorin...etc...
		aBlock: 	[:a :b | a order <= b order]
		middle: 	7
	Receiver's instance variables: 
an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactoring an ORCmdRemove...etc...

Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactoring an ORCmdRemove...etc...
	Arguments and temporary variables: 
		first: 	6
		last: 	10
		src: 	an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactorin...etc...
		dst: 	an Array(an ORCmdInlineParameterRefactoring an ORCmdMoveMethodRefactoring ...etc...
		aBlock: 	[:a :b | a order <= b order]
		middle: 	8
	Receiver's instance variables: 
an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactoring an ORCmdRemove...etc...

Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactoring an ORCmdRemove...etc...
	Arguments and temporary variables: 
		first: 	1
		last: 	10
		src: 	an Array(an ORCmdInlineParameterRefactoring an ORCmdMoveMethodRefactoring ...etc...
		dst: 	an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactorin...etc...
		aBlock: 	[:a :b | a order <= b order]
		middle: 	5
	Receiver's instance variables: 
an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactoring an ORCmdRemove...etc...

Array(ArrayedCollection)>>mergeSortFrom:to:by:
	Receiver: an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactoring an ORCmdRemove...etc...
	Arguments and temporary variables: 
		startIndex: 	1
		stopIndex: 	10
		aBlock: 	[:a :b | a order <= b order]
	Receiver's instance variables: 
an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactoring an ORCmdRemove...etc...

Array(ArrayedCollection)>>sort:
	Receiver: an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactoring an ORCmdRemove...etc...
	Arguments and temporary variables: 
		aSortBlock: 	[:a :b | a order <= b order]
	Receiver's instance variables: 
an Array(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefactoring an ORCmdRemove...etc...

[:ea | ea asArray
		sort: [:a :b | a order <= b order]] in OBCommandCluster>>groupedCommands
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		ea: 	an IdentitySet(an ORCmdInlineParameterRefactoring an ORCmdPullUpMethodRefac...etc...
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParamete...etc...
		label: 	#'Refactor method'


[:each | newCollection
		at: each key
		put: (aBlock value: each value)] in PluggableDictionary(Dictionary)>>collect:
	Receiver: a PluggableDictionary(#refactory->an IdentitySet(an ORCmdInlineParameterRefactoring an ORC...etc...
	Arguments and temporary variables: 
		aBlock: 	#refactory->an IdentitySet(an ORCmdInlineParameterRefactoring an ORCmdP...etc...
		newCollection: 	[:ea | ea asArray
		sort: [:a :b | a order <= b order]]
		each: 	a PluggableDictionary()
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil #refactory->an IdentitySet(an ORCmdInlineParameterRefactori...etc...
		hashBlock: 	[:integer | integer hash \\ 1064164 * 1009]
		equalBlock: 	nil


[:each | each
		ifNotNil: [aBlock value: each]] in PluggableDictionary(Dictionary)>>associationsDo:
	Receiver: a PluggableDictionary(#refactory->an IdentitySet(an ORCmdInlineParameterRefactoring an ORC...etc...
	Arguments and temporary variables: 
		aBlock: 	#refactory->an IdentitySet(an ORCmdInlineParameterRefactoring an ORCmdP...etc...
		each: 	[:each | newCollection
		at: each key
		put: (aBlock value: each value)]
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil #refactory->an IdentitySet(an ORCmdInlineParameterRefactori...etc...
		hashBlock: 	[:integer | integer hash \\ 1064164 * 1009]
		equalBlock: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil #refactory->an IdentitySet(an ORCmdInlineParameterRefactoring an ORCmdPullUpM...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	2
		indexLimiT: 	5
	Receiver's instance variables: 
an Array(nil #refactory->an IdentitySet(an ORCmdInlineParameterRefactoring an ORCmdPullUpM...etc...

PluggableDictionary(Dictionary)>>associationsDo:
	Receiver: a PluggableDictionary(#refactory->an IdentitySet(an ORCmdInlineParameterRefactoring an ORC...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | newCollection
		at: each key
		put: (aBlock value: each value)...etc...
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil #refactory->an IdentitySet(an ORCmdInlineParameterRefactori...etc...
		hashBlock: 	[:integer | integer hash \\ 1064164 * 1009]
		equalBlock: 	nil


PluggableDictionary(Dictionary)>>collect:
	Receiver: a PluggableDictionary(#refactory->an IdentitySet(an ORCmdInlineParameterRefactoring an ORC...etc...
	Arguments and temporary variables: 
		aBlock: 	[:ea | ea asArray
		sort: [:a :b | a order <= b order]]
		newCollection: 	a PluggableDictionary()
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil #refactory->an IdentitySet(an ORCmdInlineParameterRefactori...etc...
		hashBlock: 	[:integer | integer hash \\ 1064164 * 1009]
		equalBlock: 	nil


OBCommandCluster>>groupedCommands
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		groups: 	a PluggableDictionary(#refactory->an IdentitySet(an ORCmdInlineParamete...etc...
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParamete...etc...
		label: 	#'Refactor method'


OBCommandCluster>>populateMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(1035730944)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParamete...etc...
		label: 	#'Refactor method'


OBCommandCluster>>addItemToMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(532414464)
		submenu: 	a MenuMorph(1035730944)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParamete...etc...
		label: 	#'Refactor method'


[:cmd | cmd addItemToMenu: aMenu] in [:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]] in OBCommandCluster>>populateMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	an OBCommandCluster
		cmd: 	a MenuMorph(532414464)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an OBPrintItTextCommand an OBExploreItTextCommand an O...etc...
		label: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(an OBCommandCluster an OBCommandCluster)
	Arguments and temporary variables: 
		aBlock: 	[:cmd | cmd addItemToMenu: aMenu]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(an OBCommandCluster an OBCommandCluster)

[:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]] in OBCommandCluster>>populateMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	an Array(an OBCommandCluster an OBCommandCluster)
		group: 	a MenuMorph(532414464)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an OBPrintItTextCommand an OBExploreItTextCommand an O...etc...
		label: 	nil


Array(SequenceableCollection)>>do:separatedBy:
	Receiver: an Array(an Array(an OBRedoTextCommand an OBUndoTextCommand) an Array(an OBCutTextCommand ...etc...
	Arguments and temporary variables: 
		elementBlock: 	[:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]]
		separatorBlock: 	[aMenu addLine]
		index: 	5
		indexLimiT: 	6
	Receiver's instance variables: 
an Array(an Array(an OBRedoTextCommand an OBUndoTextCommand) an Array(an OBCutTextCommand ...etc...

OBCommandCluster>>populateMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(532414464)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an OBPrintItTextCommand an OBExploreItTextCommand an O...etc...
		label: 	nil


OBTextCommandScan(OBCommandScan)>>populateMenu:withNodes:forRequestor:
	Receiver: an OBTextCommandScan
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(532414464)
		aCollection: 	an Array(an OBTextMorphSelection)
		aRequestor: 	an OBMercuryPanel
		commands: 	an IdentitySet(an OBExploreItTextCommand an ORCmdFormat an ORCmdRenam...etc...
		cluster: 	an OBCommandCluster
	Receiver's instance variables: 
		factories: 	an OrderedCollection(OBCmdBrowseSendersOfIt OBDoItTextCommand ORCmdS...etc...


OBMercuryPanel(OBTextPanel)>>menu:shifted:selection:
	Receiver: an OBMercuryPanel
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(532414464)
		aBoolean: 	false
		aTextSelection: 	an OBTextMorphSelection
	Receiver's instance variables: 
		browser: 	an OBImplementorsBrowser


OBPluggableTextMorph>>getMenu:
	Receiver: an OBPluggableTextMorph(111935488)
	Arguments and temporary variables: 
		aShiftKeyState: 	false
		menu: 	a MenuMorph(532414464)
	Receiver's instance variables: 
		bounds: 	(572.0@217.0) corner: (1262.0@233.0)
		owner: 	an OBGroupingMorph(915406848)
		submorphs: 	an Array(a TransformMorph(390594560))
		fullBounds: 	(572@217) corner: (1262@233)
		color: 	Color white
		extension: 	a MorphExtension (1027604480) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBMercuryPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(145752064)
		scroller: 	a TransformMorph(390594560)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(277610496)
		textMorph: 	an OBTextMorph(1048838144)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
	Receiver: an OBPluggableTextMorph(111935488)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(572.0@217.0) corner: (1262.0@233.0)
		owner: 	an OBGroupingMorph(915406848)
		submorphs: 	an Array(a TransformMorph(390594560))
		fullBounds: 	(572@217) corner: (1262@233)
		color: 	Color white
		extension: 	a MorphExtension (1027604480) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBMercuryPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(145752064)
		scroller: 	a TransformMorph(390594560)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(277610496)
		textMorph: 	an OBTextMorph(1048838144)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBTextMorph(TextMorphForEditView)>>escapePressed
	Receiver: an OBTextMorph(1048838144)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (684@18)
		owner: 	a TransformMorph(390594560)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (684@18)
		color: 	Color black
		extension: 	a MorphExtension (57671680) [other:  (myDependents -> a DependentsAr...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(111935488)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


SmalltalkEditor(Editor)>>escape:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		morph: 	an OBTextMorph(1048838144)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	28
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#escape:
	Receiver's instance variables: 
		morph: 	an OBTextMorph(1048838144)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
		return: 	[:val | ^ val]
		asciiValue: 	27
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(1048838144)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(1048838144)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		morph: 	an OBTextMorph(1048838144)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	an OBTextMorph(1048838144)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		morph: 	an OBTextMorph(1048838144)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		morph: 	an OBTextMorph(1048838144)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in OBTextMorph(TextMorph)>>basicKeyStroke:
	Receiver: an OBTextMorph(1048838144)
	Arguments and temporary variables: 
		evt: 	[keystroke '<escape>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (684@18)
		owner: 	a TransformMorph(390594560)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (684@18)
		color: 	Color black
		extension: 	a MorphExtension (57671680) [other:  (myDependents -> a DependentsAr...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(111935488)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
OBSelectorNode(Object)>>doesNotUnderstand: #theClass
ORCmdSwapMethodRefactoring>>label
ORCmdSwapMethodRefactoring(OBCommand)>>order
[:a :b | a order <= b order] in [:ea | ea asArray
		sort: [:a :b | a order <= b order]] in OBCommandCluster>>groupedCommands
Array(ArrayedCollection)>>mergeFirst:middle:last:into:by:
Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
Array(ArrayedCollection)>>mergeSortFrom:to:by:
Array(ArrayedCollection)>>sort:
[:ea | ea asArray
		sort: [:a :b | a order <= b order]] in OBCommandCluster>>groupedCommands
[:each | newCollection
		at: each key
		put: (aBlock value: each value)] in PluggableDictionary(Dictionary)>>collect:
[:each | each
		ifNotNil: [aBlock value: each]] in PluggableDictionary(Dictionary)>>associationsDo:
Array(SequenceableCollection)>>do:
PluggableDictionary(Dictionary)>>associationsDo:
PluggableDictionary(Dictionary)>>collect:
OBCommandCluster>>groupedCommands
OBCommandCluster>>populateMenu:
OBCommandCluster>>addItemToMenu:
[:cmd | cmd addItemToMenu: aMenu] in [:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]] in OBCommandCluster>>populateMenu:
Array(SequenceableCollection)>>do:
[:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]] in OBCommandCluster>>populateMenu:
Array(SequenceableCollection)>>do:separatedBy:
OBCommandCluster>>populateMenu:
OBTextCommandScan(OBCommandScan)>>populateMenu:withNodes:forRequestor:
OBMercuryPanel(OBTextPanel)>>menu:shifted:selection:
OBPluggableTextMorph>>getMenu:
OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
OBTextMorph(TextMorphForEditView)>>escapePressed
SmalltalkEditor(Editor)>>escape:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in OBTextMorph(TextMorph)>>basicKeyStroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBTextMorph(TextMorph)>>handleInteraction:
OBTextMorph(TextMorphForEditView)>>handleInteraction:
OBTextMorph(TextMorph)>>basicKeyStroke:
[self basicKeyStroke: evt] in OBTextMorph(TextMorph)>>keyStroke:
NOCController class(NECController class)>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
OBTextMorph(TextMorph)>>keyStroke:
OBTextMorph(TextMorphForEditView)>>keyStroke:
OBTextMorph>>keyStroke:
OBTextMorph(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
OBTextMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: OBSelectorNode>>theClass
19 November 2013 10:47:17.968 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

OBSelectorNode(Object)>>doesNotUnderstand: #theClass
	Receiver: an OBSelectorNode
	Arguments and temporary variables: 
		aMessage: 	theClass
		exception: 	MessageNotUnderstood: OBSelectorNode>>theClass
		resumeValue: 	nil
	Receiver's instance variables: 
		metaNode: 	Selector
#implementors->Implementor

		selector: 	#deposer:
		methods: 	nil


ORCmdSwapMethodRefactoring>>label
	Receiver: an ORCmdSwapMethodRefactoring
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBMercuryPanel
		model: 	nil


ORCmdSwapMethodRefactoring(OBCommand)>>order
	Receiver: an ORCmdSwapMethodRefactoring
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBMercuryPanel
		model: 	nil


[:a :b | a order <= b order] in [:ea | ea asArray
		sort: [:a :b | a order <= b order]] in OBCommandCluster>>groupedCommands
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		a: 	an ORCmdSwapMethodRefactoring
		b: 	an ORCmdRemoveMethodRefactoring
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdInlineParameterRefactoring an ORCmdSwapMethodR...etc...
		label: 	#'Refactor method'


Array(ArrayedCollection)>>mergeFirst:middle:last:into:by:
	Receiver: an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...
	Arguments and temporary variables: 
		first: 	6
		middle: 	6
		last: 	7
		dst: 	an Array(an ORCmdMoveMethodRefactoring an ORCmdPullUpMethodRefactoring an ...etc...
		aBlock: 	[:a :b | a order <= b order]
		i1: 	6
		i2: 	7
		val1: 	an ORCmdSwapMethodRefactoring
		val2: 	an ORCmdRemoveMethodRefactoring
		out: 	5
	Receiver's instance variables: 
an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...

Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...
	Arguments and temporary variables: 
		first: 	6
		last: 	7
		src: 	an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactorin...etc...
		dst: 	an Array(an ORCmdMoveMethodRefactoring an ORCmdPullUpMethodRefactoring an ...etc...
		aBlock: 	[:a :b | a order <= b order]
		middle: 	6
	Receiver's instance variables: 
an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...

Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...
	Arguments and temporary variables: 
		first: 	6
		last: 	8
		src: 	an Array(an ORCmdMoveMethodRefactoring an ORCmdPullUpMethodRefactoring an ...etc...
		dst: 	an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactorin...etc...
		aBlock: 	[:a :b | a order <= b order]
		middle: 	7
	Receiver's instance variables: 
an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...

Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...
	Arguments and temporary variables: 
		first: 	6
		last: 	10
		src: 	an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactorin...etc...
		dst: 	an Array(an ORCmdMoveMethodRefactoring an ORCmdPullUpMethodRefactoring an ...etc...
		aBlock: 	[:a :b | a order <= b order]
		middle: 	8
	Receiver's instance variables: 
an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...

Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
	Receiver: an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...
	Arguments and temporary variables: 
		first: 	1
		last: 	10
		src: 	an Array(an ORCmdMoveMethodRefactoring an ORCmdPullUpMethodRefactoring an ...etc...
		dst: 	an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactorin...etc...
		aBlock: 	[:a :b | a order <= b order]
		middle: 	5
	Receiver's instance variables: 
an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...

Array(ArrayedCollection)>>mergeSortFrom:to:by:
	Receiver: an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...
	Arguments and temporary variables: 
		startIndex: 	1
		stopIndex: 	10
		aBlock: 	[:a :b | a order <= b order]
	Receiver's instance variables: 
an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...

Array(ArrayedCollection)>>sort:
	Receiver: an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...
	Arguments and temporary variables: 
		aSortBlock: 	[:a :b | a order <= b order]
	Receiver's instance variables: 
an Array(an ORCmdPullUpMethodRefactoring an ORCmdRemoveParameterRefactoring an ORCmdRename...etc...

[:ea | ea asArray
		sort: [:a :b | a order <= b order]] in OBCommandCluster>>groupedCommands
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		ea: 	an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdPullUpMethodRefactor...etc...
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdInlineParameterRefactoring an ORCmdSwapMethodR...etc...
		label: 	#'Refactor method'


[:each | newCollection
		at: each key
		put: (aBlock value: each value)] in PluggableDictionary(Dictionary)>>collect:
	Receiver: a PluggableDictionary(#refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdP...etc...
	Arguments and temporary variables: 
		aBlock: 	#refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdPull...etc...
		newCollection: 	[:ea | ea asArray
		sort: [:a :b | a order <= b order]]
		each: 	a PluggableDictionary()
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil #refactory->an IdentitySet(an ORCmdRenameMethodRefactoring ...etc...
		hashBlock: 	[:integer | integer hash \\ 1064164 * 1009]
		equalBlock: 	nil


[:each | each
		ifNotNil: [aBlock value: each]] in PluggableDictionary(Dictionary)>>associationsDo:
	Receiver: a PluggableDictionary(#refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdP...etc...
	Arguments and temporary variables: 
		aBlock: 	#refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdPull...etc...
		each: 	[:each | newCollection
		at: each key
		put: (aBlock value: each value)]
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil #refactory->an IdentitySet(an ORCmdRenameMethodRefactoring ...etc...
		hashBlock: 	[:integer | integer hash \\ 1064164 * 1009]
		equalBlock: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil #refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdPullUpMeth...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	2
		indexLimiT: 	5
	Receiver's instance variables: 
an Array(nil #refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdPullUpMeth...etc...

PluggableDictionary(Dictionary)>>associationsDo:
	Receiver: a PluggableDictionary(#refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdP...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | newCollection
		at: each key
		put: (aBlock value: each value)...etc...
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil #refactory->an IdentitySet(an ORCmdRenameMethodRefactoring ...etc...
		hashBlock: 	[:integer | integer hash \\ 1064164 * 1009]
		equalBlock: 	nil


PluggableDictionary(Dictionary)>>collect:
	Receiver: a PluggableDictionary(#refactory->an IdentitySet(an ORCmdRenameMethodRefactoring an ORCmdP...etc...
	Arguments and temporary variables: 
		aBlock: 	[:ea | ea asArray
		sort: [:a :b | a order <= b order]]
		newCollection: 	a PluggableDictionary()
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil #refactory->an IdentitySet(an ORCmdRenameMethodRefactoring ...etc...
		hashBlock: 	[:integer | integer hash \\ 1064164 * 1009]
		equalBlock: 	nil


OBCommandCluster>>groupedCommands
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		groups: 	a PluggableDictionary(#refactory->an IdentitySet(an ORCmdRenameMethodRe...etc...
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdInlineParameterRefactoring an ORCmdSwapMethodR...etc...
		label: 	#'Refactor method'


OBCommandCluster>>populateMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(746586112)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdInlineParameterRefactoring an ORCmdSwapMethodR...etc...
		label: 	#'Refactor method'


OBCommandCluster>>addItemToMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(243269632)
		submenu: 	a MenuMorph(746586112)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an ORCmdInlineParameterRefactoring an ORCmdSwapMethodR...etc...
		label: 	#'Refactor method'


[:cmd | cmd addItemToMenu: aMenu] in [:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]] in OBCommandCluster>>populateMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	an OBCommandCluster
		cmd: 	a MenuMorph(243269632)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an OBCmdBrowseImplementorsOfIt an OBCopyTextCommand an...etc...
		label: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(an OBCommandCluster an OBCommandCluster)
	Arguments and temporary variables: 
		aBlock: 	[:cmd | cmd addItemToMenu: aMenu]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(an OBCommandCluster an OBCommandCluster)

[:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]] in OBCommandCluster>>populateMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	an Array(an OBCommandCluster an OBCommandCluster)
		group: 	a MenuMorph(243269632)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an OBCmdBrowseImplementorsOfIt an OBCopyTextCommand an...etc...
		label: 	nil


Array(SequenceableCollection)>>do:separatedBy:
	Receiver: an Array(an Array(an OBRedoTextCommand an OBUndoTextCommand) an Array(an OBCutTextCommand ...etc...
	Arguments and temporary variables: 
		elementBlock: 	[:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]]
		separatorBlock: 	[aMenu addLine]
		index: 	5
		indexLimiT: 	6
	Receiver's instance variables: 
an Array(an Array(an OBRedoTextCommand an OBUndoTextCommand) an Array(an OBCutTextCommand ...etc...

OBCommandCluster>>populateMenu:
	Receiver: an OBCommandCluster
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(243269632)
	Receiver's instance variables: 
		commands: 	an IdentitySet(an OBCmdBrowseImplementorsOfIt an OBCopyTextCommand an...etc...
		label: 	nil


OBTextCommandScan(OBCommandScan)>>populateMenu:withNodes:forRequestor:
	Receiver: an OBTextCommandScan
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(243269632)
		aCollection: 	an Array(an OBTextMorphSelection)
		aRequestor: 	an OBMercuryPanel
		commands: 	an IdentitySet(an OBPrintItTextCommand an OBCmdBrowseSendersOfIt an O...etc...
		cluster: 	an OBCommandCluster
	Receiver's instance variables: 
		factories: 	an OrderedCollection(OBCmdBrowseSendersOfIt OBDoItTextCommand ORCmdS...etc...


OBMercuryPanel(OBTextPanel)>>menu:shifted:selection:
	Receiver: an OBMercuryPanel
	Arguments and temporary variables: 
		aMenu: 	a MenuMorph(243269632)
		aBoolean: 	false
		aTextSelection: 	an OBTextMorphSelection
	Receiver's instance variables: 
		browser: 	an OBImplementorsBrowser


OBPluggableTextMorph>>getMenu:
	Receiver: an OBPluggableTextMorph(175898624)
	Arguments and temporary variables: 
		aShiftKeyState: 	false
		menu: 	a MenuMorph(243269632)
	Receiver's instance variables: 
		bounds: 	(572.0@217.0) corner: (1262.0@233.0)
		owner: 	an OBGroupingMorph(979369984)
		submorphs: 	an Array(a TransformMorph(455344128))
		fullBounds: 	(572@217) corner: (1262@233)
		color: 	Color white
		extension: 	a MorphExtension (19398656) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBMercuryPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(209715200)
		scroller: 	a TransformMorph(455344128)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(341573632)
		textMorph: 	an OBTextMorph(40632320)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
	Receiver: an OBPluggableTextMorph(175898624)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(572.0@217.0) corner: (1262.0@233.0)
		owner: 	an OBGroupingMorph(979369984)
		submorphs: 	an Array(a TransformMorph(455344128))
		fullBounds: 	(572@217) corner: (1262@233)
		color: 	Color white
		extension: 	a MorphExtension (19398656) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBMercuryPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(209715200)
		scroller: 	a TransformMorph(455344128)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(341573632)
		textMorph: 	an OBTextMorph(40632320)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBTextMorph(TextMorphForEditView)>>escapePressed
	Receiver: an OBTextMorph(40632320)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (684@18)
		owner: 	a TransformMorph(455344128)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (684@18)
		color: 	Color black
		extension: 	a MorphExtension (123207680) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(175898624)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


SmalltalkEditor(Editor)>>escape:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		morph: 	an OBTextMorph(40632320)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	28
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#escape:
	Receiver's instance variables: 
		morph: 	an OBTextMorph(40632320)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
		return: 	[:val | ^ val]
		asciiValue: 	27
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(40632320)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(40632320)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		morph: 	an OBTextMorph(40632320)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	an OBTextMorph(40632320)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		morph: 	an OBTextMorph(40632320)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<escape>']
	Receiver's instance variables: 
		morph: 	an OBTextMorph(40632320)
		selectionShowing: 	true
		model: 	an OBMercuryPanel
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in OBTextMorph(TextMorph)>>basicKeyStroke:
	Receiver: an OBTextMorph(40632320)
	Arguments and temporary variables: 
		evt: 	[keystroke '<escape>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (684@18)
		owner: 	a TransformMorph(455344128)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (684@18)
		color: 	Color black
		extension: 	a MorphExtension (123207680) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(175898624)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
OBSelectorNode(Object)>>doesNotUnderstand: #theClass
ORCmdSwapMethodRefactoring>>label
ORCmdSwapMethodRefactoring(OBCommand)>>order
[:a :b | a order <= b order] in [:ea | ea asArray
		sort: [:a :b | a order <= b order]] in OBCommandCluster>>groupedCommands
Array(ArrayedCollection)>>mergeFirst:middle:last:into:by:
Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
Array(ArrayedCollection)>>mergeSortFrom:to:src:dst:by:
Array(ArrayedCollection)>>mergeSortFrom:to:by:
Array(ArrayedCollection)>>sort:
[:ea | ea asArray
		sort: [:a :b | a order <= b order]] in OBCommandCluster>>groupedCommands
[:each | newCollection
		at: each key
		put: (aBlock value: each value)] in PluggableDictionary(Dictionary)>>collect:
[:each | each
		ifNotNil: [aBlock value: each]] in PluggableDictionary(Dictionary)>>associationsDo:
Array(SequenceableCollection)>>do:
PluggableDictionary(Dictionary)>>associationsDo:
PluggableDictionary(Dictionary)>>collect:
OBCommandCluster>>groupedCommands
OBCommandCluster>>populateMenu:
OBCommandCluster>>addItemToMenu:
[:cmd | cmd addItemToMenu: aMenu] in [:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]] in OBCommandCluster>>populateMenu:
Array(SequenceableCollection)>>do:
[:group | group
		do: [:cmd | cmd addItemToMenu: aMenu]] in OBCommandCluster>>populateMenu:
Array(SequenceableCollection)>>do:separatedBy:
OBCommandCluster>>populateMenu:
OBTextCommandScan(OBCommandScan)>>populateMenu:withNodes:forRequestor:
OBMercuryPanel(OBTextPanel)>>menu:shifted:selection:
OBPluggableTextMorph>>getMenu:
OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
OBTextMorph(TextMorphForEditView)>>escapePressed
SmalltalkEditor(Editor)>>escape:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in OBTextMorph(TextMorph)>>basicKeyStroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBTextMorph(TextMorph)>>handleInteraction:
OBTextMorph(TextMorphForEditView)>>handleInteraction:
OBTextMorph(TextMorph)>>basicKeyStroke:
[self basicKeyStroke: evt] in OBTextMorph(TextMorph)>>keyStroke:
NOCController class(NECController class)>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
OBTextMorph(TextMorph)>>keyStroke:
OBTextMorph(TextMorphForEditView)>>keyStroke:
OBTextMorph>>keyStroke:
OBTextMorph(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
OBTextMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: instance-set is not a legal inst var name
19 November 2013 10:56:07.046 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

ClassBuilder(Object)>>error:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		aString: 	'instance-set is not a legal inst var name'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


[:name | name isLegalInstVarName
		ifFalse: [self error: name , ' is not a legal inst var name']] in ClassBuilder>>validateInstvars:from:forSuper:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		name: 	'instance-set'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


Set>>do:
	Receiver: a Set('instance-set')
	Arguments and temporary variables: 
		aBlock: 	[:name | name isLegalInstVarName
		ifFalse: [self error: name , ' is no...etc...
		index: 	4
		each: 	'instance-set'
		indexLimiT: 	7
	Receiver's instance variables: 
		tally: 	1
		array: 	#(nil nil nil 'instance-set' nil nil nil)


ClassBuilder>>validateInstvars:from:forSuper:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>class:instanceVariableNames:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		oldClass: 	Compte class
		instVarString: 	'instance-set'
		unsafe: 	false
		instVars: 	#('instance-set')
		newClass: 	nil
		needNew: 	nil
		copyOfOldClass: 	nil
		copyOfOldTraitComposition: 	nil
		copyOfOldClassTraitComposition: 	nil
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>class:instanceVariableNames:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		oldClass: 	Compte class
		instVarString: 	'instance-set'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


Metaclass>>instanceVariableNames:
	Receiver: Compte class
	Arguments and temporary variables: 
		instVarString: 	'instance-set'
	Receiver's instance variables: 
		superclass: 	Object class
		methodDict: 	a MethodDictionary()
		format: 	156
		instanceVariables: 	nil
		organization: 	('instance creation')

		thisClass: 	Compte
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a Text for 'Compte class
	instanceVariableNames: ''instance-set''...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	an OBPluggableTextMorph(990380032)
		failBlock: 	[^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Compte class instanceVariableNames: 'instance-set'
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(250609664)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		requestor: 	an OBPluggableTextMorph(990380032)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	a Text for 'Compte class
	instanceVariableNames: ''instance-set''...etc...
		anObject: 	nil
		aController: 	an OBPluggableTextMorph(990380032)
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	a Text for 'Compte class
	instanceVariableNames: ''instance-set''...etc...
		aController: 	an OBPluggableTextMorph(990380032)
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


RBAddMetaclassChange(RBRefactoryDefinitionChange)>>primitiveExecute
	Receiver: Compte class
	instanceVariableNames: 'instance-set'!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Compte
		isMeta: 	false
		controller: 	an OBPluggableTextMorph(990380032)
		definition: 	a Text for 'Compte class
	instanceVariableNames: ''instance-set'''
		definedClass: 	nil
		classInstanceVariableNames: 	#('instance' 'set')


RBAddMetaclassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: Compte class
	instanceVariableNames: 'instance-set'!
	Arguments and temporary variables: 
		aBlock: 	[]
		undo: 	Compte class
	instanceVariableNames: ''!
	Receiver's instance variables: 
		name: 	nil
		className: 	#Compte
		isMeta: 	false
		controller: 	an OBPluggableTextMorph(990380032)
		definition: 	a Text for 'Compte class
	instanceVariableNames: ''instance-set'''
		definedClass: 	nil
		classInstanceVariableNames: 	#('instance' 'set')


RBAddMetaclassChange(RBRefactoryChange)>>execute
	Receiver: Compte class
	instanceVariableNames: 'instance-set'!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Compte
		isMeta: 	false
		controller: 	an OBPluggableTextMorph(990380032)
		definition: 	a Text for 'Compte class
	instanceVariableNames: ''instance-set'''
		definedClass: 	nil
		classInstanceVariableNames: 	#('instance' 'set')


[self addUndo: aRefactoringChange execute] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	Compte class
	instanceVariableNames: 'instance-set'!
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: [self addUndo: aRefactoringChange execute]
	Arguments and temporary variables: 
		aBlock: 	[isPerformingRefactoring := false]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RBRefactoryChangeManager>>performChange:
		startpc: 	31
		numArgs: 	0


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[self addUndo: aRefactoringChange execute]
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	Compte class
	instanceVariableNames: 'instance-set'!
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


ORClassDefinition>>defineClass:notifying:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		definition: 	a Text for 'Compte class
	instanceVariableNames: ''instance-set'''
		aController: 	an OBPluggableTextMorph(990380032)
		change: 	Compte class
	instanceVariableNames: 'instance-set'!
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)
		template: 	'Compte class
	instanceVariableNames: '''''


ORClassDefinition(OBClassDefinition)>>accept:notifying:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		aText: 	a Text for 'Compte class
	instanceVariableNames: ''instance-set'''
		aController: 	an OBPluggableTextMorph(990380032)
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)
		template: 	'Compte class
	instanceVariableNames: '''''


[def accept: aText notifying: aController] in [:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	an ORClassDefinition
		aController: 	a Text for 'Compte class
	instanceVariableNames: ''instance-set'''...etc...
		def: 	an OBPluggableTextMorph(990380032)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


BlockClosure>>on:do:
	Receiver: [def accept: aText notifying: aController]
	Arguments and temporary variables: 
		exception: 	OBAnnouncerRequest
		handlerAction: 	[:notification | notification resume: self announcer]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[:def | [def accept: aText notifying: aController]
		on: OBAnnoun...etc...
		startpc: 	51
		numArgs: 	0


[:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	an ORClassDefinition
		aController: 	a Text for 'Compte class
	instanceVariableNames: ''instance-set'''...etc...
		def: 	an OBPluggableTextMorph(990380032)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>withDefinitionDo:ifNil:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		workBlock: 	[:def | [def accept: aText notifying: aController]
		on: OBAnnouncer...etc...
		nilBlock: 	[true]
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	a Text for 'Compte class
	instanceVariableNames: ''instance-set'''
		aController: 	an OBPluggableTextMorph(990380032)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
	Receiver: an OBPluggableTextMorph(990380032)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'Compte class
	instanceVariableNames: ''instance-set''...etc...
	Receiver's instance variables: 
		bounds: 	(343.0@564.0) corner: (1033.0@815.0)
		owner: 	an OBGroupingMorph(565182464)
		submorphs: 	an Array(a TransformMorph(196608000))
		fullBounds: 	(343@564) corner: (1033@815)
		color: 	Color white
		extension: 	a MorphExtension (208142336) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1018167296)
		scroller: 	a TransformMorph(196608000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(82837504)
		textMorph: 	an OBTextMorph(229376000)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(51 to: 50)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


BlockClosure>>ensure:
	Receiver: [^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perfo...etc...
	Arguments and temporary variables: 
		aBlock: 	[unstyledAcceptText := nil]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
		startpc: 	65
		numArgs: 	0


OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
	Receiver: an OBPluggableTextMorph(990380032)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'Compte class
	instanceVariableNames: ''instance-set''...etc...
	Receiver's instance variables: 
		bounds: 	(343.0@564.0) corner: (1033.0@815.0)
		owner: 	an OBGroupingMorph(565182464)
		submorphs: 	an Array(a TransformMorph(196608000))
		fullBounds: 	(343@564) corner: (1033@815)
		color: 	Color white
		extension: 	a MorphExtension (208142336) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1018167296)
		scroller: 	a TransformMorph(196608000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(82837504)
		textMorph: 	an OBTextMorph(229376000)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(51 to: 50)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>acceptBasic
	Receiver: an OBPluggableTextMorph(990380032)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(51 to: 50)
		saveScrollerOffset: 	(-3@0)
	Receiver's instance variables: 
		bounds: 	(343.0@564.0) corner: (1033.0@815.0)
		owner: 	an OBGroupingMorph(565182464)
		submorphs: 	an Array(a TransformMorph(196608000))
		fullBounds: 	(343@564) corner: (1033@815)
		color: 	Color white
		extension: 	a MorphExtension (208142336) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1018167296)
		scroller: 	a TransformMorph(196608000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(82837504)
		textMorph: 	an OBTextMorph(229376000)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(51 to: 50)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>accept
	Receiver: an OBPluggableTextMorph(990380032)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(343.0@564.0) corner: (1033.0@815.0)
		owner: 	an OBGroupingMorph(565182464)
		submorphs: 	an Array(a TransformMorph(196608000))
		fullBounds: 	(343@564) corner: (1033@815)
		color: 	Color white
		extension: 	a MorphExtension (208142336) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(1018167296)
		scroller: 	a TransformMorph(196608000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(82837504)
		textMorph: 	an OBTextMorph(229376000)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(51 to: 50)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBTextMorphSelection>>accept
	Receiver: an OBTextMorphSelection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		selection: 	(51 to: 50)
		text: 	a Text for 'Compte class
	instanceVariableNames: ''instance-set'''
		morph: 	an OBPluggableTextMorph(990380032)


OBAcceptTextCommand>>execute
	Receiver: an OBAcceptTextCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


OBAcceptTextCommand(OBCommand)>>perform:orSendTo:
	Receiver: an OBAcceptTextCommand
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableTextMorph(990380032)
	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(401604608)'Accept'
	Arguments and temporary variables: 
		evt: 	[(618@924) mouseUp 619001 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(571.0@917.0) corner: (768.0@935.0)
		owner: 	a MenuMorph(128188416)
		submorphs: 	#()
		fullBounds: 	(571.0@917.0) corner: (768.0@935.0)
		color: 	Color black
		extension: 	a MorphExtension (411828224)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Accept'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBAcceptTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(990380032))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+s'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(401604608)'Accept'
	Arguments and temporary variables: 
		evt: 	[(618@924) mouseUp 619001 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(571.0@917.0) corner: (768.0@935.0)
		owner: 	a MenuMorph(128188416)
		submorphs: 	#()
		fullBounds: 	(571.0@917.0) corner: (768.0@935.0)
		color: 	Color black
		extension: 	a MorphExtension (411828224)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Accept'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBAcceptTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(990380032))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+s'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(401604608)'Accept'
	Arguments and temporary variables: 
		evt: 	[(618@924) mouseUp 619001 nil]
	Receiver's instance variables: 
		bounds: 	(571.0@917.0) corner: (768.0@935.0)
		owner: 	a MenuMorph(128188416)
		submorphs: 	#()
		fullBounds: 	(571.0@917.0) corner: (768.0@935.0)
		color: 	Color black
		extension: 	a MorphExtension (411828224)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Accept'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBAcceptTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(990380032))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+s'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(401604608)'Accept'
	Arguments and temporary variables: 
		anEvent: 	[(618@924) mouseUp 619001 nil]
	Receiver's instance variables: 
		bounds: 	(571.0@917.0) corner: (768.0@935.0)
		owner: 	a MenuMorph(128188416)
		submorphs: 	#()
		fullBounds: 	(571.0@917.0) corner: (768.0@935.0)
		color: 	Color black
		extension: 	a MorphExtension (411828224)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Accept'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBAcceptTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(990380032))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+s'



--- The full stack ---
ClassBuilder(Object)>>error:
[:name | name isLegalInstVarName
		ifFalse: [self error: name , ' is not a legal inst var name']] in ClassBuilder>>validateInstvars:from:forSuper:
Set>>do:
ClassBuilder>>validateInstvars:from:forSuper:
ClassBuilder>>class:instanceVariableNames:unsafe:
ClassBuilder>>class:instanceVariableNames:
Metaclass>>instanceVariableNames:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:notifying:logged:
RBAddMetaclassChange(RBRefactoryDefinitionChange)>>primitiveExecute
RBAddMetaclassChange(RBRefactoryClassChange)>>executeNotifying:
RBAddMetaclassChange(RBRefactoryChange)>>execute
[self addUndo: aRefactoringChange execute] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ORClassDefinition>>defineClass:notifying:
ORClassDefinition(OBClassDefinition)>>accept:notifying:
[def accept: aText notifying: aController] in [:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
BlockClosure>>on:do:
[:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
OBDefinitionPanel>>withDefinitionDo:ifNil:
OBDefinitionPanel>>accept:notifying:
[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
BlockClosure>>ensure:
OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
OBPluggableTextMorph(PluggableTextMorph)>>acceptBasic
OBPluggableTextMorph(PluggableTextMorph)>>accept
OBTextMorphSelection>>accept
OBAcceptTextCommand>>execute
OBAcceptTextCommand(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
OBPluggableTextMorph(ScrollPane)>>mouseDown:
OBPluggableTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
OBPluggableTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBGroupingMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Compte class>>instanceSet
19 November 2013 11:03:24.212 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, StackToRegisterMappingCogit VMMaker-oscog-EstebanLorenzano.161 uuid: 8e0c22c3-b48d-4d8d-a7f9-8a75dc246f28 Jul 18 2012, https://git.gitorious.org/cogvm/blessed.git Commit: 5151310c41b08f55b70e9c6250711cb1f3672ce7 Date: 2012-07-18 14:06:15 +0200 By: Camillo Bruni <camillobruni@gmail.com>
Image: Pharo1.4 [Latest update: #14457]

Compte class(Object)>>doesNotUnderstand: #instanceSet
	Receiver: Compte
	Arguments and temporary variables: 
		aMessage: 	instanceSet
		exception: 	MessageNotUnderstood: Compte class>>instanceSet
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#deposer:->(Compte>>#deposer: "a CompiledMethod(...etc...
		format: 	134
		instanceVariables: 	#('proprio' 'solde')
		organization: 	('initialize-release' initialize:)
('metier' deposer: getSolde re...etc...
		subclasses: 	nil
		name: 	#Compte
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#METAPROG
		traitComposition: 	nil
		localSelectors: 	nil
		instanceSet: 	an OrderedCollection()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(317194240)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Compte instanceSet
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(171966464)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(317194240)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | 
selectionInterval := oldEditor selectionInterval.
	textMorp...etc...
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(317194240)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: result printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(411303936)
	Arguments and temporary variables: 
		oldEditor: 	an Array(a SmalltalkEditor)
	Receiver's instance variables: 
		bounds: 	(620.0@66.0) corner: (1060.0@233.0)
		owner: 	a SystemWindow(1026555904)
		submorphs: 	an Array(a TransformMorph(680525824))
		fullBounds: 	(620@66) corner: (1060@233)
		color: 	Color white
		extension: 	a MorphExtension (295960576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(439091200)
		scroller: 	a TransformMorph(680525824)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(566755328)
		textMorph: 	a TextMorphForEditView(317194240)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(39 to: 38)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		editBlock: 	[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result ...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(680525824)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (399769600) [other:  (blinkStart -> 1044225) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compte initialize.
Compte instanceSet.
'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(411303936)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(411303936)
	Arguments and temporary variables: 
		oldEditor: 	an Array(a SmalltalkEditor)
	Receiver's instance variables: 
		bounds: 	(620.0@66.0) corner: (1060.0@233.0)
		owner: 	a SystemWindow(1026555904)
		submorphs: 	an Array(a TransformMorph(680525824))
		fullBounds: 	(620@66) corner: (1060@233)
		color: 	Color white
		extension: 	a MorphExtension (295960576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(439091200)
		scroller: 	a TransformMorph(680525824)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(566755328)
		textMorph: 	a TextMorphForEditView(317194240)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(39 to: 38)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph printIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(411303936)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph printIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(411303936)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	167
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph printIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(411303936)
		secondArg: 	a PluggableTextMorph(411303936)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	167
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph printIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(411303936)
		secondArg: 	a PluggableTextMorph(411303936)
		thirdArg: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	167
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Cmd + P do [:morph | morph printIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(411303936)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(411303936)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [:morph | morph printIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		action: 	[:morph | morph printIt]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [:morph | morph printIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph printIt]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Cmd + P do [:morph | morph printIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph printIt]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#printIt on Cmd + P do [:morph | morph printIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#Unix->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #browseIt on Cmd + B do [:morph | morph b...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	9
		each: 	#printIt on Cmd + P do [:morph | morph printIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 #browseIt on Cmd + B...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#Unix->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(411303936)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(411303936)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(411303936)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	3
		each: 	a KMCategoryTarget
		indexLimiT: 	5
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(nil a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a ...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(411303936)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(411303936)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(411303936)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(411303936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(620.0@66.0) corner: (1060.0@233.0)
		owner: 	a SystemWindow(1026555904)
		submorphs: 	an Array(a TransformMorph(680525824))
		fullBounds: 	(620@66) corner: (1060@233)
		color: 	Color white
		extension: 	a MorphExtension (295960576) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(439091200)
		scroller: 	a TransformMorph(680525824)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(566755328)
		textMorph: 	a TextMorphForEditView(317194240)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(39 to: 38)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(680525824)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set()
		morph: 	a TransformMorph(680525824)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(680525824)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(621.0@67.0) corner: (1059.0@232.0)
		owner: 	a PluggableTextMorph(411303936)
		submorphs: 	an Array(a TextMorphForEditView(317194240))
		fullBounds: 	(621.0@67.0) corner: (1059.0@232.0)
		color: 	Color transparent
		extension: 	a MorphExtension (687865856) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-624.0@ -67.0...etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (432@50)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(317194240)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set()
		morph: 	a TextMorphForEditView(317194240)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(680525824)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (399769600) [other:  (blinkStart -> 1044225) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compte initialize.
Compte instanceSet.
'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(411303936)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(680525824)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (399769600) [other:  (blinkStart -> 1044225) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compte initialize.
Compte instanceSet.
'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(411303936)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(317194240)
	Receiver's instance variables: 
		timeStamp: 	1056177
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(147.0@25.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	112


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(680525824)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (399769600) [other:  (blinkStart -> 1044225) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compte initialize.
Compte instanceSet.
'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(411303936)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(317194240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(680525824)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (399769600) [other:  (blinkStart -> 1044225) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compte initialize.
Compte instanceSet.
'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(411303936)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(317194240)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(763@83) corner: (779@99)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(763@83) corner: (779@99)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(317194240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(771@92) mouseOver nil nil]
		targetOffset: 	(161.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1053761 772 90 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
Compte class(Object)>>doesNotUnderstand: #instanceSet
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: result printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
[:morph | morph printIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

